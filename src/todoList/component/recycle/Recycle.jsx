import React from 'react';import Toolbar from './../common/ToolBar.jsx'import Mode from './RecycleCalculateMode.jsx'import './recycle.less'class Low extends React.Component {    constructor(props) {        super(props);        this.state = {            totalValue: 87496, // 循环总压耗            showConfigPanel: false,            tabs: [                {label: '地面管汇压耗', code: 'pipe', value: 1,                    formula: '地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818'                },                {label: '钻杆内循环压耗', code: 'inner-cycle', value: 2,                    formula: '7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/钻具内径^4.82'                },                {label: '加重钻杆内循环压耗', code: 'heavy-inner-cycle', value: 3},                {label: '钻铤内循环压耗', code: 'drill-inner-cycle', value: 4},                {label: '钻头压降', code: 'drill', value: 5,                    formula: '泵压 - 循环压耗'                },                {label: '钻杆环空压耗', code: 'body-cycle', value: 6,                    formula: '7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/钻具内径^4.82'                },                {label: '加重钻杆环空压耗', code: 'heavy-body-cycle', value: 7},                {label: '钻铤环空压耗', code: 'drill-cycle', value: 8},                {label: '钻杆接箍环空压耗', code: 'body-cycle-patch', value: 9},                {label: '加重钻杆接箍环空压耗', code: 'heavy-body-cycle-patch', value: 9},                {label: '循环总压耗', code: 'cycle', value: 10}            ]        };    }    getCalculator(code) {        switch (code) {            case 'pipe':                return <Mode.Pipe setValue={this.setValue.bind(this)} code={code}/>;            case 'inner-cycle':                return <Mode.InnerCycle setValue={this.setValue.bind(this)} code={code}/>;            case 'drill':                return <Mode.Drill setValue={this.setValue.bind(this)} code={code}/>;            case 'body-cycle':                return <Mode.BodyCycle setValue={this.setValue.bind(this)} code={code}/>;            case 'cycle':                return <Mode.Cycle setValue={this.setValue.bind(this)} code={code}/>;            default:                return null;        }    }    setValue(v, code) {        const tabs = Object.assign(this.state.tabs, []);        let tab = tabs.filter(i => {return i.code === code})[0];        tab.value = v;        this.setState({            tabs: tabs        })    }    showConfigPanel() {        this.setState({            showConfigPanel: true        });    }    getConfigs() {        let list = [];        let tabList = this.state.tabs;        tabList.forEach((item, key) => {            list.push(<div className='config-unit' key={key}>                <div className='config-title'>                    <span className='config-label'> {item.label} </span>                    <span className='config-formula'> {item.formula} </span>                </div>                <div className='config-control'>                    {this.getCalculator(item.code)}                </div>            </div>)        });        return list;    }    configPanel() {        if(this.state.showConfigPanel === true) {            return (<div className='configPanel'>                <div className='config' ref='configPanel'>                    {this.getConfigs()}                    <div className='btn-div'>                        <span className='confirm' onClick={this.confirm.bind(this)}>确定</span>                        <span onClick={this.cancel.bind(this)}>取消</span>                    </div>                </div>            </div>)        }        return null;    }    confirm() {        this.setState({            showConfigPanel: false        })    }    cancel() {        this.setState({            showConfigPanel: false        })    }    renderPrams() {        let list = [];        this.state.tabs.forEach((item, key) => {            list.push(<div className='config-unit' key={key}>                <div className='config-title'>                    <span className='config-label'> {item.label} </span>                </div>                <div className='config-control'>                    <span className='config-input' data-code={item.code}> {item.value} </span>                </div>            </div>)        });        return list;    }    getStyledNum(value) {        const valStr = value.toString();        let list = [];        for(const i in valStr) {            list.push( <span className='block' key={i}> {valStr[i]} </span>)        }        return list;    }    setRecycleTotal() {        return <div className='num-div'>            {this.getStyledNum(this.state.totalValue)}        </div>    }    render() {        return <div className="recycle-bg">            {this.configPanel()}            <div className="open-config" onClick={this.showConfigPanel.bind(this)}>设置</div>            <img className="recycle-img" src={`./image/recycle/recycle.gif`}/>            <div className="param-div">                {this.renderPrams()}            </div>            <div className='recycle-div'>                <div className='title'>循环总压耗</div>                {this.setRecycleTotal()}            </div>            <Toolbar navigate={this.props.navigate && this.props.navigate.bind(this)}/>        </div>    }}export default Low;