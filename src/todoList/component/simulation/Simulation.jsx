import React from 'react';import Toolbar from './../common/ToolBar.jsx'import Mode from './SimulationCalculateMode.jsx'import './simulation.less'class Simulation extends React.Component {    constructor(props) {        super(props);        this.state = {            percent: 0,            showConfigPanel: false,            currentFrame: 'direct',            tabs: [                {label: '漏层承压能力', code: 'load', value: 0,                    formula: '堵漏浆密度*g*预计水泥塞长+堵漏时钻井液密度*g*（漏层垂深 - （（堵漏浆方量 - 挤水泥方量）/(1/4π井眼直径的平方）））'                },                {label: '预计水泥塞长', code: 'predict', value: 0,                    formula: '（堵漏浆方量 - 挤水泥方量）/(1/4π井眼直径的平方）-新环空静液面高度'                },                {label: '实际水泥塞长', code: 'real', value: 0,                    formula: '（堵漏浆方量 - 挤水泥方量）/(1/4π井眼直径的平方）-新环空静液面高度'                },            ]        };        this.frame = [            {label: '直井段', value: 'direct'},            {label: '斜井段', value: 'skew'},            {label: '水平段', value: 'even'}        ]    }    setValue(code, v) {        const tabs = Object.assign(this.state.tabs, []);        let tab = tabs.filter(i => {return i.code === code})[0];        tab.value = v;        console.log(tabs)        this.setState({            tabs: tabs        })    }    getCalculator(code) {        switch (code) {            case 'load':                return <Mode.Load setValue={this.setValue.bind(this)} code={code}/>;            case 'predict':                return <Mode.Predict setValue={this.setValue.bind(this)} code={code}/>;            case 'real':                return <Mode.Real setValue={this.setValue.bind(this)} code={code}/>;            default:                return null;        }    }    showConfigPanel() {        this.setState({            showConfigPanel: true        });    }    setFormula(formula) {        if(formula === undefined) return null;        if(typeof formula === 'string') {            return <p> {formula} </p>        } else {            let list = [];            formula.forEach((item, key) => {                list.push(<p key={key}> {item} </p>)            })            return list;        }    }    getConfigs() {        let list = [];        this.state.tabs.forEach((item, key) => {            list.push(<li className='config-unit' key={key}>                <div className='config-title'>                    <span className='config-label'> {item.label} </span>                    <span className='config-formula'> {this.setFormula(item.formula)} </span>                </div>                <div className='config-control'>                    {this.getCalculator(item.code, item.value)}                </div>            </li>)        });        return list;    }    configPanel() {        if(this.state.showConfigPanel === true) {            return (<div className='configPanel'>                <div className='config' ref='configPanel'>                    <img className='close' src='./image/icon/close.png' onClick={this.close.bind(this)}/>                    {this.getConfigs()}                    <div className='btn-div'>                        <span className='confirm' onClick={this.confirm.bind(this)}>确定</span>                    </div>                </div>            </div>)        }        return null;    }    confirm() {        this.setState({            showConfigPanel: false        })    }    close() {        this.setState({            showConfigPanel: false        })    }    renderPrams() {        let list = [];        this.state.tabs.forEach((item, key) => {            list.push(<div className='config-unit' key={key}>                <div className='config-title'>                    <span className='config-label'> {item.label} </span>                </div>                <div className='config-control'>                    <span className='config-input' data-code={item.code}> {item.value} </span>                </div>            </div>)        });        return list;    }    setFrame(v) {       this.setState({           currentFrame: v       })    }    getFrame() {        let list = [];        this.frame.forEach(item => {            list.push(<li key={item.label} onClick={this.setFrame.bind(this, item.value)} className={this.state.currentFrame === item.value ? 'selected' : ''}> {item.label} </li>)        });        return <ul className="frame-div">{list}</ul>    }    getSimuImg() {        let simu = {            'direct':  ['./image/simulation/direct.png', './image/simulation/direct-real.png'],            'skew':  ['./image/simulation/skew.png', './image/simulation/skew-real.png'],            'even':  ['./image/simulation/even.png', './image/simulation/even-real.png'],        }        return (<div className="simulation-div">            <img className="simu" src={simu[this.state.currentFrame][0]}/>            <div className="sep"></div>            <img className="real" src={simu[this.state.currentFrame][1]}/>        </div>);    }    simuTabs() {        return <div className="frame">            {this.getFrame()}            {this.getSimuImg()}        </div>    }    render() {        return <div className="simu-bg">            {this.configPanel()}            <div className="open-config" onClick={this.showConfigPanel.bind(this)}>设置</div>            {this.simuTabs()}            <div className="param-div">                {this.renderPrams()}            </div>            <Toolbar navigate={this.props.navigate && this.props.navigate.bind(this)}/>        </div>    }}export default Simulation;