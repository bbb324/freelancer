import React from 'react';import Tabs from './../common/Tabs.jsx';import Toolbar from './../common/ToolBar.jsx'import AnalysisConfigPanel from './AnalysisConfigPanel.jsx'import AnalysisAnimation from './AnalysisAnimation.jsx'import Mode from './CalculatMode.jsx'import './analysis.less'class Analysis extends React.Component {    constructor(props) {        super(props);        this.state = {            percent: 0,            showConfigPanel: false,            tabs: [                {                    label: '泵排量', imgUrl: 'ana-pump.png', code: 'pump', value: '',                    formula: 'π*（缸套直径/2）^2*活塞冲程*缸套数*冲数*上水效率'                },                {label: '循环压耗', imgUrl: 'ana-cycle.png', code: 'cycle', value: '',                    formula: ['地面管汇压耗 = 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818',                    '钻具环空压耗 = 7628 * 塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8* ((钻具长度/钻具内径)^4.82)',                    '钻杆段环空压耗 = 7628 * 塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8* ((钻具长度/钻具内径)^4.82)',                    '钻杆段内循环压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/钻具内径^4.82',                    '钻铤段内压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8* ((钻具长度/钻具内径)^4.82)']                },                {                    label: '钻头压降', imgUrl: 'ana-drill.png', code: 'drill', value: '',                    formula: '泵压 - 循环压耗'                },                {label: '液流变参数', imgUrl: 'ana-params.png', code: 'params', value: '',                    formula: 'Ф600 - Ф300'                },                {                    label: '环空返速', imgUrl: 'ana-loop.png', code: 'loop', value: '',                    formula: '1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))'                },                {label: '流态', imgUrl: 'ana-flow.png', code: 'flow', value: '',                    formula: ['有效视粘度 = 塑性粘度 + 0.112 * ((井眼直径 - 钻杆外径) * 动切力 / 环空返速)',                    '环空的雷诺数 = 928 * 环空液流的流速 * (井眼直径 - 钻杆外径) * 钻井液密度 * C23 / 有效视粘度 * Math.pow(((2 * 环空流性指数 + 1) / (3 * 环空流性指数)), 环空流性指数)']                }            ],            singleItem: ''        };    }    setValue(v, code) {        const tabs = Object.assign(this.state.tabs, []);        let tab = tabs.filter(i => {return i.code === code})[0];        tab.value = v;        this.setState({            tabs: tabs        });    }    // 设置里面的每一项计算公式，是从以下 class 当中获取到的    getCalculator(code) {        switch (code) {            case 'pump':                return <Mode.Pump code={code} setValue={this.setValue.bind(this)}/>;            case 'cycle':                return <Mode.Cycle code={code} setValue={this.setValue.bind(this)}/>;            case 'drill':                return <Mode.Drill code={code} setValue={this.setValue.bind(this)}/>;            case 'params':                return <Mode.Params code={code} setValue={this.setValue.bind(this)}/>;            case 'loop':                return <Mode.Loop code={code} setValue={this.setValue.bind(this)}/>;            case 'flow':                return <Mode.Flow code={code} setValue={this.setValue.bind(this)}/>;            default:                return <div> default </div>        }    }  getPercent(params) {       if(params != undefined) {           let value = params[0].value;  //这里后面要改，这里只输入了一个值，需要一个公式           if(value >= 100) {              value = 100           }           if(value <= 0) {               value = 0;           }           return 32*value*0.01;       } else {           return 0;       }    }    showConfigPanel() {        this.setState({            showConfigPanel: true,            singleItem: ''        });    }    setFormula(formula) {        if(formula === undefined) return null;        if(typeof formula === 'string') {            return <p> {formula} </p>        } else {            let list = [];            formula.forEach((item, key) => {                list.push(<p key={key}> {item} </p>)            })            return list;        }    }    // 弹出的设置界面是根据 this.state.tabs 里面内容进行渲染的    getConfigs() {        let list = [];        if(this.state.singleItem !== '') {            list.push(<li className='config-unit' key={this.state.singleItem.code}>                <div className='config-title'>                    <span className='config-label'> {this.state.singleItem.label} </span>                    <span className='config-formula'> {this.setFormula(this.state.singleItem.formula)} </span>                </div>                <div className='config-control'>                    {this.getCalculator(this.state.singleItem.code)}                </div>            </li>)        } else {            this.state.tabs.forEach((item, key) => {                list.push(<li className='config-unit' key={key}>                    <div className='config-title'>                        <span className='config-label'> {item.label} </span>                        <span className='config-formula'> {this.setFormula(item.formula)} </span>                    </div>                    <div className='config-control'>                        {this.getCalculator(item.code)}                    </div>                </li>)            });        }        return list;    }    openSetting(item) {        this.setState({            showConfigPanel: true,            singleItem: item        })    }    confirm() {        this.setState({            showConfigPanel: false,        })    }    cancel() {        this.setState({            showConfigPanel: false        })    }    close() {        this.setState({            showConfigPanel: false        })    }    // 点设置后，会弹出这个界面    configPanel() {            return <div className='configPanel' style={{display: this.state.showConfigPanel === true ? '': 'none'}}>                <div className='config' ref='configPanel'>                    <img className='close' src='./image/icon/close.png' onClick={this.close.bind(this)}/>                    {this.getConfigs()}                    <div className='btn-div'>                        <span className='confirm' onClick={this.confirm.bind(this)}>确定</span>                    </div>                </div>            </div>    }    render() {        return (<div className="ana-content">            {this.configPanel()}            <div className="shiubeng-bg">                <div className="open-config" onClick={this.showConfigPanel.bind(this)}>设置</div>               <AnalysisAnimation />               <div className="water-bg" style={{height: `${this.state.percent}%`}}>                   <img className="water" src={`./image/icon/water.png`}/>               </div>            </div>            <AnalysisConfigPanel dataSource={this.state.tabs} openSetting={this.openSetting.bind(this)} />            <Toolbar navigate={this.props.navigate && this.props.navigate.bind(this)}/>            </div>)    }}export default Analysis;