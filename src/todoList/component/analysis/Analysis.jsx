import React from 'react';import Tabs from './../common/Tabs.jsx';import Toolbar from './../common/ToolBar.jsx'import AnalysisConfigPanel from './AnalysisConfigPanel.jsx'import AnalysisAnimation from './AnalysisAnimation.jsx'import './analysis.less'class Analysis extends React.Component {    constructor(props) {        super(props);        this.state = {            percent: 0,            showConfigPanel: false,            tabs: [                {label: '泵排量', imgUrl: 'ana-pump.png', code: 'pump', value: ''},                {label: '循环压耗', imgUrl: 'ana-cycle.png', code: 'cycle', value: ''},                {label: '钻头压降', imgUrl: 'ana-drill.png', code: 'drill', value: ''},                {label: '液流变参数', imgUrl: 'ana-params.png', code: 'params', value: ''},                {label: '环空返速', imgUrl: 'ana-loop.png', code: 'loop', value: ''},                {label: '流态', imgUrl: 'ana-flow.png', code: 'flow', value: ''}            ]        };    }  getPercent(params) {       if(params != undefined) {           let value = params[0].value;  //这里后面要改，这里只输入了一个值，需要一个公式           if(value >= 100) {              value = 100           }           if(value <= 0) {               value = 0;           }           return 32*value*0.01;       } else {           return 0;       }    }    /*    setValue(v) {        if(v >= 100) {            v = 100;        }        if(v <= 0) {            v = 0;        }        this.setState({            percent: v        })    }*/    showConfigPanel() {        this.setState({            showConfigPanel: true        });    }    getConfigs() {        let list = [];        this.state.tabs.forEach((item, key) => {            list.push(<li className='config-unit' key={key}>               <div className='config-title'>                   <span className='config-label'> {item.label} </span>               </div>                <div className='config-control'>                    <input className='config-input' data-code={item.code} defaultValue={item.value}/>                </div>            </li>)        });        return list;    }    getParams() {        let inputs = this.refs.configPanel.querySelectorAll('input');        const tabs = Object.assign(this.state.tabs, []);        tabs.forEach(item => {            item.value = this.refs.configPanel.querySelector(`input[data-code="${item.code}"]`).value        });        return tabs;    }    confirm() {        const params = this.getParams();        const percent = this.getPercent(params);        this.setState({            showConfigPanel: false,            tabs: params,            percent: percent        })    }    cancel() {        this.setState({            showConfigPanel: false        })    }    configPanel() {        if(this.state.showConfigPanel === true) {            return <div className='configPanel'>                <div className='config' ref='configPanel'>                    {this.getConfigs()}                    <div className='btn-div'>                        <span className='confirm' onClick={this.confirm.bind(this)}>确定</span>                        <span onClick={this.cancel.bind(this)}>取消</span>                    </div>                </div>            </div>        }        return null;    }    render() {        return (<div className="ana-content">            {this.configPanel()}            <div className="shiubeng-bg">               <AnalysisAnimation />               <div className="water-bg" style={{height: `${this.state.percent}%`}}>                   <img className="water" src={`./image/analysis/water.png`}/>               </div>            </div>            <AnalysisConfigPanel dataSource={this.state.tabs} setData={this.showConfigPanel.bind(this)}/>            <Toolbar />            </div>)    }}export default Analysis;