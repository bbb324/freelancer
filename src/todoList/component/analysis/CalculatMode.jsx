import React from 'react';import Input from '../common/Input.jsx';function get(ref) {   return +ref.refs[Object.keys(ref.refs)[0]].value}var event = document.createEvent('HTMLEvents')// 泵排量计算公式class Pump extends React.Component {    constructor(props) {        super(props);        this.state = {            value: 0        }    }    calculate() {       let value = Math.PI * Math.pow((get(this.refs.a) / 2), 2) * get(this.refs.b) * get(this.refs.c) * get(this.refs.d)  * get(this.refs.e) * 100;        this.props.setValue(value, this.props.code);        event.initEvent("triggerPump", true, true);        event.pumpValue = value;        document.dispatchEvent(event);        this.setState({           value: value       });    }    render() {        return <div className="math-params">            <Input name={'管套直径'} code={'a'} ref={'a'} value=''/>            <Input name={'活塞冲程'} code={'b'} ref={'b'} />            <Input name={'缸套数'} code={'c'} ref={'c'} />            <Input name={'冲数'} code={'d'} ref={'d'} />            <Input name={'上水效率'} code={'e'} ref={'e'} />            <div>                <span className='result'> 结果： {this.state.value} </span>                <div className='cal-btn' onClick={this.calculate.bind(this)}>计算</div>            </div>        </div>    }}// 循环压耗class Cycle extends React.Component {    constructor(props) {        super(props);        this.state = {            value: 0,            C2: 3117,            C3: 0.006193,            C4: 1.078,            initPumpValue: '',            unit: 'normal'        }    }    calculate() {        // Psur 地面管汇压耗 = 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818        let Psur = get(this.refs.e) * get(this.refs.b) * Math.pow((get(this.refs.a) / 100), 1.86) * 9.818;        // Pca 钻具环空压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8        let Pca = this.getPressure();        // Ppa 钻杆段环空压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8        let Ppa = this.getPressure();        // Pp 钻杆段内循环压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8        let Pp = this.getPressure();        // Pc 钻铤段内压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8        let Pc = this.getPressure();        let value = Psur + Pc + Pp + Pca + Ppa;        this.props.setValue(value, this.props.code);        event.initEvent("triggerCycle", true, true);        event.loopValue = value;        document.dispatchEvent(event);        this.setState({            value: value        })    }    getPressure() {        return 7628 * Math.pow(get(this.refs.c), 0.2) * Math.pow(get(this.refs.b), 0.8) * Math.pow(get(this.refs.a), 1.8) * get(this.refs.j) / Math.pow(((get(this.refs.d) - get(this.refs.g)), 3)) / Math.pow(((get(this.refs.d) + get(this.refs.g)), 1.8))    }    render() {        return <div className="math-params">            <Input name="泵排量" code={'a'}  ref='a' defaultValue={this.state.initPumpValue}/>            <Input name="井内钻井液密度" code={'b'} ref='b' />            <Input name="钻井液塑性粘度" code={'c'} ref='c' />            <Input name="井眼直径" code={'d'} ref='d' />            <Input name="地面管汇摩阻系数" code={'e'} ref='e' />            <Input name="钻杆加重钻杆钻铤内径" code={'f'} ref='f' />            <Input name="钻杆加重钻杆钻铤外径" code={'g'} ref='g' />            <Input name="钻杆接箍外径" code={'h'} ref='h' />            <Input name="钻杆加重钻杆钻铤长度" code={'j'} ref='j' />            <Input name="Ф600" code={'k'} ref='k' />            <Input name="Ф300" code={'l'} ref='l' />            <div>                <span className='result'> 结果： {this.state.value} </span>                <div className='cal-btn' onClick={this.calculate.bind(this)}>计算</div>            </div>        </div>    }    componentDidMount() {        this.eventListener = document.addEventListener('triggerPump', event => {            this.setState({                initPumpValue: event.pumpValue            })        }, false);    }    componentWillUnMount() {        document.removeEventListener(this.eventListener);    }}// 钻头压降class Drill extends React.Component {    constructor(props) {        super(props);        this.state = {            value: 0,            initCycleValue: ''        }    }    calculate() {        // v1 地面管汇压耗 = 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818        let value = get(this.refs.a) - get(this.refs.b);        this.props.setValue(value, this.props.code);        this.setState({            value: value        })    }    render() {        return <div className="math-params">            <Input name="泵压" code={'a'}  ref='a'/>            <Input name="循环压耗" code={'b'}  ref='b' defaultValue={this.state.initCycleValue}/>            <div>                <span className='result'> 结果： {this.state.value} </span>                <div className='cal-btn' onClick={this.calculate.bind(this)}>计算</div>            </div>        </div>    }    componentDidMount() {        this.eventListener = document.addEventListener('triggerCycle', event => {            this.setState({                initCycleValue: event.loopValue            })        }, false);    }    componentWillUnMount() {        document.removeEventListener(this.eventListener);    }}// 液流变参数class Params extends React.Component {    constructor(props) {        super(props);        this.state = {            n: 0,            k: 0,            av: 0,            pv: 0,            yp: 0,            rate: 0        }    }    calculate() {       // Ф600 -Ф300        let value = get(this.refs.a) - get(this.refs.b);        this.props.setValue(value, this.props.code);        this.setState({            value: value        })    }    render() {        return <div className="math-params">            <Input name="Ф600" code={'a'}  ref='a'/>            <Input name="Ф300" code={'b'}  ref='b'/>            <div>                <span className='result'> 结果： {this.state.value} </span>                <div className='cal-btn' onClick={this.calculate.bind(this)}>计算</div>            </div>        </div>    }}// 环空返速class Loop extends React.Component {    constructor(props) {        super(props);        this.state = {            value: 0,            initPumpValue: '',        }    }    calculate() {        // value 环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))        let value = 1.2732 * Math.pow(10, 3) * get(this.refs.a) / (Math.pow(get(this.refs.b), 2) - Math.pow(get(this.refs.c), 2));        this.props.setValue(value, this.props.code);        event.initEvent("triggerLoop", true, true);        event.loopValue = value;        document.dispatchEvent(event);        this.setState({            value: value        })    }    render() {        return <div className="math-params">            <Input name="泵排量" code={'a'}  ref='a' defaultValue={this.state.initPumpValue}/>            <Input name="井眼直径" code={'b'}  ref='b'/>            <Input name="钻具外径" code={'c'}  ref='c' />            <div>                <span className='result'> 结果： {this.state.value} </span>                <div className='cal-btn' onClick={this.calculate.bind(this)}>计算</div>            </div>        </div>    }    componentDidMount() {        this.eventListener = document.addEventListener('triggerPump', event => {            this.setState({                initPumpValue: event.pumpValue            })        }, false);    }    componentWillUnMount() {        document.removeEventListener(this.eventListener);    }}// 流态class Flow extends React.Component {    constructor(props) {        super(props);        this.state = {            a: 0,            b: 0,            c: 0,            unit: 'normal',            C23: 1.0779,            initLoopValue: ''        }    }    calculate() {        // 有效视粘度 = 塑性粘度 + 0.112 * ((井眼直径 - 钻杆外径) * 动切力 / 环空返速)        let Ucp = get(this.refs.g) + 0.112 *((get(this.refs.b) - get(this.refs.c) ) * get(this.refs.h) / get(this.refs.i));        // 环空的雷诺数 = 928 * 环空液流的流速 * (井眼直径 - 钻杆外径) * 钻井液密度 * C23 / 有效视粘度 * Math.pow(((2 * 环空流性指数 + 1) / (3 * 环空流性指数)), 环空流性指数)        let Rep = 928 * get(this.refs.a) * (get(this.refs.b) - get(this.refs.c)) * get(this.refs.d) * this.state.C23 / Ucp * Math.pow(((2 * get(this.refs.f) + 1) / (3 * get(this.refs.f))), get(this.refs.f))        let value = '';        if(Rep < 2100) {            value = '层流';        } else {            value = '紊流'        }        let str = `${value}，雷诺数: ${Rep}`;        this.props.setValue(value, this.props.code);        this.setState({            value: str        })    }    setUnit(v) {        if(v === 'normal') {            this.setState({                C23: 1.0779,                unit: v            });        } else {            this.setState({                C23: 1,                unit: v            });        }    }    render() {        return <div className="math-params">            <div className='unit-select'>                <label><input name="Unit" type="radio" value="" checked={this.state.unit === 'normal'? 'checked': ''} onChange={this.setUnit.bind(this, 'normal')} />法定计量单位</label>                <label><input name="Unit" type="radio" value="" checked={this.state.unit === 'western'? 'checked': ''}  onChange={this.setUnit.bind(this, 'western')} />英制单位</label>            </div>            <Input name="钻具外径" code={'c'}  ref='c' />            <Input name="环空液流的流速" code={'a'} ref={'a'} />            <Input name="井眼直径" code={'b'} ref={'b'} />            <Input name="钻杆外径" code={'c'} ref={'c'} />            <Input name="钻井液密度" code={'d'} ref={'d'} />            <Input name="环空流性指数" code={'f'} ref={'f'} />            <Input name="塑性粘度" code={'g'} ref={'g'} />            <Input name="动切力" code={'h'} ref={'h'} />            <Input name="环空返速" code={'i'}  ref='i' defaultValue={this.state.initLoopValue}/>            <div>                <span className='result'> 结果： {this.state.value} </span>                <div className='cal-btn' onClick={this.calculate.bind(this)}>计算</div>            </div>        </div>    }    componentDidMount() {        this.eventListener = document.addEventListener('triggerLoop', event => {            this.setState({                initLoopValue: event.loopValue            })        }, false);    }    componentWillUnMount() {        document.removeEventListener(this.eventListener);    }}module.exports = {    Pump,    Cycle,    Drill,    Params,    Loop,    Flow};