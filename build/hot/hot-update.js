webpackHotUpdate("pageOne",{

/***/ "./src/todoList/component/recycle/RecycleCalculateMode.jsx":
/*!*****************************************************************!*\
  !*** ./src/todoList/component/recycle/RecycleCalculateMode.jsx ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Input = __webpack_require__(/*! ../common/Input.jsx */ \"./src/todoList/component/common/Input.jsx\");\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _FinalCalculate = __webpack_require__(/*! ../common/FinalCalculate.jsx */ \"./src/todoList/component/common/FinalCalculate.jsx\");\n\nvar _FinalCalculate2 = _interopRequireDefault(_FinalCalculate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction get(ref) {\n  return +ref.refs[Object.keys(ref.refs)[0]].value;\n} // 地面管汇压耗\n\n\nvar Pipe =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Pipe, _React$Component);\n\n  function Pipe(props) {\n    var _this;\n\n    _classCallCheck(this, Pipe);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pipe).call(this, props));\n    _this.state = {\n      value: 0\n    };\n    return _this;\n  }\n\n  _createClass(Pipe, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818\n      var value = get(this.refs.a) * get(this.refs.b) * Math.pow(get(this.refs.c) / 100, 1.86) * 9.818;\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '地面管汇摩阻系数',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Pipe;\n}(_react2.default.Component); // 钻杆内循环压耗\n\n\nvar InnerCycle =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(InnerCycle, _React$Component2);\n\n  function InnerCycle(props) {\n    var _this2;\n\n    _classCallCheck(this, InnerCycle);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(InnerCycle).call(this, props));\n    _this2.state = {\n      value: 0\n    };\n    return _this2;\n  }\n\n  _createClass(InnerCycle, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/钻具内径^4.82\n      var value = 7628 * Math.pow(get(this.refs.a), 0.2) * Math.pow(get(this.refs.b), 0.8) * Math.pow(get(this.refs.c), 1.8) * get(this.refs.d) / Math.pow(get(this.refs.e), 4.82);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '塑性粘度',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻具长度',\n        code: 'd',\n        ref: 'd'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻具内径',\n        code: 'e',\n        ref: 'e'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return InnerCycle;\n}(_react2.default.Component); // 钻头压降\n\n\nvar Drill =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Drill, _React$Component3);\n\n  function Drill(props) {\n    var _this3;\n\n    _classCallCheck(this, Drill);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Drill).call(this, props));\n    _this3.state = {\n      value: 0\n    };\n    return _this3;\n  }\n\n  _createClass(Drill, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // v1 地面管汇压耗 = 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818\n      var value = get(this.refs.a) - get(this.refs.b);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '泵压',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '循环压耗',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Drill;\n}(_react2.default.Component); // 钻杆环空压耗\n\n\nvar BodyCycle =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(BodyCycle, _React$Component4);\n\n  function BodyCycle(props) {\n    var _this4;\n\n    _classCallCheck(this, BodyCycle);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(BodyCycle).call(this, props));\n    _this4.state = {\n      value: 0\n    };\n    return _this4;\n  }\n\n  _createClass(BodyCycle, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8\n      var value = 7628 * Math.pow(get(this.refs.a), 0.2) * Math.pow(get(this.refs.b), 0.8) * Math.pow(get(this.refs.c), 1.8) * get(this.refs.d) / Math.pow(get(this.refs.e) - get(this.refs.f), 3) / Math.pow(get(this.refs.e) + get(this.refs.f), 1.8);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '塑性粘度',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻具长度',\n        code: 'd',\n        ref: 'd'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '井眼直径',\n        code: 'e',\n        ref: 'e'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻具外径',\n        code: 'f',\n        ref: 'f'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return BodyCycle;\n}(_react2.default.Component);\n\nvar Total =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(Total, _React$Component5);\n\n  function Total(props) {\n    var _this5;\n\n    _classCallCheck(this, Total);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Total).call(this, props));\n    _this5.state = {\n      input: [{\n        label: '泵排量',\n        value: ''\n      }, {\n        label: '钻井液密度',\n        value: ''\n      }, {\n        label: '塑性粘度',\n        value: ''\n      }, {\n        label: '井眼直径',\n        value: ''\n      }, {\n        label: '地面管汇摩阻系数',\n        value: ''\n      }, {\n        label: '钻杆内径',\n        value: ''\n      }, {\n        label: '加重钻杆内径',\n        value: ''\n      }, {\n        label: '钻铤内径',\n        value: ''\n      }, {\n        label: '钻杆外径',\n        value: ''\n      }, {\n        label: '加重钻杆外径',\n        value: ''\n      }, {\n        label: '钻铤外径',\n        value: ''\n      }, {\n        label: '钻杆接箍外径',\n        value: ''\n      }, {\n        label: '加重钻杆接箍外径',\n        value: ''\n      }, {\n        label: '钻杆长度',\n        value: ''\n      }, {\n        label: '加重钻杆长度',\n        value: ''\n      }, {\n        label: '钻铤长度',\n        value: ''\n      }, {\n        label: '钻杆接箍长度',\n        value: ''\n      }, {\n        label: '加重钻杆接箍长度',\n        value: ''\n      },\n      /*   {label: '钻杆加重钻杆钻铤内径', value: ''},\r\n         {label: '钻杆加重钻杆钻铤外径', value: ''},\r\n         {label: '钻杆接箍外径', value: ''},\r\n         {label: '钻杆加重钻杆钻铤长度', value: ''},*/\n      {\n        label: '泵压',\n        value: ''\n      }],\n      output: [{\n        label: '地面管汇压耗',\n        value: 0\n      }, {\n        label: '钻杆内循环压耗',\n        value: 0\n      }, {\n        label: '加重钻杆内循环压耗',\n        value: 0\n      }, {\n        label: '钻铤内循环压耗',\n        value: 0\n      }, {\n        label: '钻头压降',\n        value: 0\n      }, {\n        label: '钻杆环空压耗',\n        value: 0\n      }, {\n        label: '加重钻杆环空压耗',\n        value: 0\n      }, {\n        label: '钻铤环空压耗',\n        value: 0\n      }, {\n        label: '钻杆接箍环空压耗',\n        value: 0\n      }, {\n        label: '加重钻杆接箍环空压耗',\n        value: 0\n      }, {\n        label: '总循环压耗',\n        value: 0\n      }]\n    };\n    _this5.formula = ['地面管汇压耗 = 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818', '钻具循环压耗 = 7628 * 塑性粘度^0.2*钻井液密度^0.8 * 泵排量^1.8 * 钻具长度/钻具内径^4.82', '钻具环空压耗 = 7628 * 塑性粘度^0.2*钻井液密度^0.8 * 泵排量^1.8 * 钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8', '钻头压降 = 泵压 - 循环压耗', '公式中钻具指的就是钻杆、加重钻杆、钻铤、钻杆接箍、加重钻杆接箍'];\n    return _this5;\n  }\n\n  _createClass(Total, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var inputs = Object.assign(this.state.input, []);\n      var outputs = Object.assign(this.state.output, []);\n      inputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      outputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      this.setState({\n        input: inputs,\n        output: outputs\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(label) {\n      var unit = this.totalParams.filter(function (item) {\n        return item.label === label;\n      });\n      return +unit[0].value;\n    } // 如果算不出来，返回0\n\n  }, {\n    key: \"getValidate\",\n    value: function getValidate(val) {\n      if (isNaN(val) || val === Infinity) {\n        return 0;\n      }\n\n      return (+val).toFixed(2);\n    } // 环空压耗统一计算公式, param1: 钻具长度, param2: 钻具外径\n\n  }, {\n    key: \"getPressure\",\n    value: function getPressure(param1, param2) {\n      return 7628 * Math.pow(this.getValue('塑性粘度'), 0.2) * Math.pow(this.getValue('钻井液密度'), 0.8) * Math.pow(this.getValue('泵排量'), 1.8) * param1 / Math.pow(this.getValue('井眼直径') - param2, 3) / Math.pow(this.getValue('井眼直径') + param2, 1.8);\n    } // 内循环压耗统一计算公式, param1: 钻具长度, param2: 钻具内径\n\n  }, {\n    key: \"getRecycle\",\n    value: function getRecycle(param1, param2) {\n      return 7628 * Math.pow(this.getValue('塑性粘度'), 0.2) * Math.pow(this.getValue('钻井液密度'), 0.8) * Math.pow(this.getValue('泵排量'), 1.8) * param1 / Math.pow(param2, 4.82);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(inputParams) {\n      this.totalParams = inputParams;\n      var outputs = Object.assign(this.state.output, []);\n      /*   // v1: 循环压耗\r\n         let v1 = 7628 *  Math.pow(this.getValue('塑性粘度'),0.2) * Math.pow(this.getValue('钻井液密度'),0.8) * Math.pow(this.getValue('泵排量'),1.8) * this.getValue('钻杆加重钻杆钻铤长度')/Math.pow(this.getValue('钻杆加重钻杆钻铤内径'),4.82);\r\n           // v2: 环空压耗\r\n         let v2 = 7628 * Math.pow(this.getValue('塑性粘度'),0.2) * Math.pow(this.getValue('钻井液密度'),0.8) * Math.pow(this.getValue('泵排量'),1.8) * this.getValue('钻杆加重钻杆钻铤长度') / Math.pow((this.getValue('井眼直径')-this.getValue('钻杆加重钻杆钻铤外径')), 3) / Math.pow((this.getValue('井眼直径')+this.getValue('钻杆加重钻杆钻铤外径')), 1.8)\r\n      */\n      // v1: 钻杆内循环压耗\n\n      var v1 = this.getRecycle(this.getValue('钻杆长度'), this.getValue('钻杆内径'));\n      console.log(v1); // v2: 加重钻杆内循环压耗\n\n      var v2 = this.getRecycle(this.getValue('加重钻杆长度'), this.getValue('加重钻杆内径')); // v3: 钻铤内循环压耗\n\n      var v3 = this.getRecycle(this.getValue('钻铤长度'), this.getValue('钻铤内径')); // v5: 钻杆环空压耗\n\n      var v5 = this.getPressure(this.getValue('钻杆长度'), this.getValue('钻杆外径')); // v6: 加重钻杆环空压耗\n\n      var v6 = this.getPressure(this.getValue('加重钻杆长度'), this.getValue('加重钻杆外径')); // v7: 钻铤环空压耗\n\n      var v7 = this.getPressure(this.getValue('钻铤长度'), this.getValue('钻铤外径')); // v8: 钻杆接箍环空压耗\n\n      var v8 = this.getPressure(this.getValue('钻杆接箍长度'), this.getValue('钻杆接箍外径')); // v9: 加重钻杆接箍环空压耗\n\n      var v9 = this.getPressure(this.getValue('加重钻杆接箍长度'), this.getValue('加重钻杆接箍外径')); // v0: 地面管汇压耗\n\n      var v0 = this.getValue('地面管汇摩阻系数') * this.getValue('钻井液密度') * Math.pow(this.getValue('泵排量') / 100, 1.86) * 9.818;\n      outputs[0].value = this.getValidate(v0); // 钻杆加重钻杆钻铤内循环压耗\n\n      outputs[1].value = this.getValidate(v1); // 钻杆内循环压耗\n\n      outputs[2].value = this.getValidate(v2); // 加重钻杆内循环压耗\n\n      outputs[3].value = this.getValidate(v3); // 钻铤内循环压耗\n\n      var res = this.getValue('泵压') - v1;\n      outputs[4].value = this.getValidate(res); // 钻头压降\n\n      outputs[5].value = this.getValidate(v5); // 钻杆环空压耗\n\n      outputs[6].value = this.getValidate(v6); // 加重钻杆环空压耗\n\n      outputs[7].value = this.getValidate(v7); // 钻铤环空压耗\n\n      outputs[8].value = this.getValidate(v8); // 钻杆接箍环空压耗\n\n      outputs[9].value = this.getValidate(v9); // 加重钻杆接箍环空压耗\n\n      console.log(); // v3：总循环压耗\n\n      var v10 = this.getValidate(+this.getValidate(v1) + +this.getValidate(v2) + +this.getValidate(v3) + +this.getValidate(v5) + +this.getValidate(v6) + +this.getValidate(v7) + +this.getValidate(v8) + +this.getValidate(v9));\n      outputs[10].value = this.getValidate(v10);\n      outputs.forEach(function (item) {\n        window.localStorage.setItem(item.label, item.value);\n      });\n      this.setState({\n        output: outputs\n      });\n      this.props.setBack(outputs);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_FinalCalculate2.default, {\n        inputParams: this.state.input,\n        outputParams: this.state.output,\n        setValue: this.setValue.bind(this),\n        title: '循环压耗',\n        formula: this.formula\n      });\n    }\n  }]);\n\n  return Total;\n}(_react2.default.Component);\n\nmodule.exports = {\n  Drill: Drill,\n  Pipe: Pipe,\n  InnerCycle: InnerCycle,\n  BodyCycle: BodyCycle,\n  Total: Total\n};\n\n//# sourceURL=webpack:///./src/todoList/component/recycle/RecycleCalculateMode.jsx?");

/***/ })

})