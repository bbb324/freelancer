webpackHotUpdate("purify",{

/***/ "./src/todoList/component/purify/PurCalculateMode.jsx":
/*!************************************************************!*\
  !*** ./src/todoList/component/purify/PurCalculateMode.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Input = __webpack_require__(/*! ../common/Input.jsx */ \"./src/todoList/component/common/Input.jsx\");\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _FinalCalculate = __webpack_require__(/*! ../common/FinalCalculate.jsx */ \"./src/todoList/component/common/FinalCalculate.jsx\");\n\nvar _FinalCalculate2 = _interopRequireDefault(_FinalCalculate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction get(ref) {\n  return +ref.refs[Object.keys(ref.refs)[0]].value;\n} // 表面粘度计算公式\n\n\nvar Viscosity =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Viscosity, _React$Component);\n\n  function Viscosity(props) {\n    var _this;\n\n    _classCallCheck(this, Viscosity);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Viscosity).call(this, props));\n    _this.state = {\n      value: 0\n    };\n    return _this;\n  }\n\n  _createClass(Viscosity, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // Ф600 / 2\n      var value = get(this.refs.a) / 2;\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: 'Ф600',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Viscosity;\n}(_react2.default.Component); // 塑性粘度计算公式\n\n\nvar PlasticViscosity =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(PlasticViscosity, _React$Component2);\n\n  function PlasticViscosity(props) {\n    var _this2;\n\n    _classCallCheck(this, PlasticViscosity);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(PlasticViscosity).call(this, props));\n    _this2.state = {\n      value: 0\n    };\n    return _this2;\n  }\n\n  _createClass(PlasticViscosity, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // Ф600 / 2\n      var value = get(this.refs.a) - get(this.refs.b);\n      this.props.setValue(value, this.props.code, this.props.side);\n      event.initEvent(\"triggerPlasticViscosity\", true, true);\n      event.PvValue = value;\n      document.dispatchEvent(event);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: 'Ф600',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: 'Ф300',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return PlasticViscosity;\n}(_react2.default.Component); // 动切力\n\n\nvar YieldPoint =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(YieldPoint, _React$Component3);\n\n  function YieldPoint(props) {\n    var _this3;\n\n    _classCallCheck(this, YieldPoint);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(YieldPoint).call(this, props));\n    _this3.state = {\n      value: 0\n    };\n    return _this3;\n  }\n\n  _createClass(YieldPoint, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 0.479 * (2*Ф300-Ф600)\n      var value = 0.479 * (2 * get(this.refs.b) - get(this.refs.a));\n      this.props.setValue(value, this.props.code, this.props.side);\n      event.initEvent(\"triggerYieldPoint\", true, true);\n      event.yieldPointValue = value;\n      document.dispatchEvent(event);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: 'Ф600',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: 'Ф300',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return YieldPoint;\n}(_react2.default.Component); // 动塑比\n\n\nvar FreezePlastic =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(FreezePlastic, _React$Component4);\n\n  function FreezePlastic(props) {\n    var _this4;\n\n    _classCallCheck(this, FreezePlastic);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(FreezePlastic).call(this, props));\n    _this4.state = {\n      value: 0,\n      initYieldPointValue: '',\n      initPvValue: ''\n    };\n    return _this4;\n  }\n\n  _createClass(FreezePlastic, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  动切力 / 动塑比\n      var value = get(this.refs.a) / get(this.refs.b);\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '动切力(YP)',\n        code: 'a',\n        ref: 'a',\n        defaultValue: this.state.initYieldPointValue\n      }), _react2.default.createElement(_Input2.default, {\n        name: '塑性粘度(VP)',\n        code: 'b',\n        ref: 'b',\n        defaultValue: this.state.initPvValue\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this5 = this;\n\n      this.eventListener1 = document.addEventListener('triggerYieldPoint', function (event) {\n        _this5.setState({\n          initYieldPointValue: event.yieldPointValue\n        });\n      }, false);\n      this.eventListener2 = document.addEventListener('triggerPlasticViscosity', function (event) {\n        _this5.setState({\n          initPvValue: event.PvValue\n        });\n      }, false);\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener1);\n      document.removeEventListener(this.eventListener2);\n    }\n  }]);\n\n  return FreezePlastic;\n}(_react2.default.Component); // 环空返速\n\n\nvar Loop =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(Loop, _React$Component5);\n\n  function Loop(props) {\n    var _this6;\n\n    _classCallCheck(this, Loop);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Loop).call(this, props));\n    _this6.state = {\n      value: 0\n    };\n    return _this6;\n  }\n\n  _createClass(Loop, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))\n      var value = 1.2732 * Math.pow(10, 3) * get(this.refs.a) / (Math.pow(get(this.refs.b), 2) - Math.pow(get(this.refs.c), 2));\n      this.props.setValue(value, this.props.code, this.props.side);\n      event.initEvent(\"triggerLoop\", true, true);\n      event.loopValue = value;\n      document.dispatchEvent(event);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '井眼直径',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻具外径',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Loop;\n}(_react2.default.Component); // 岩屑滑落速度\n\n\nvar SlipSpeed =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(SlipSpeed, _React$Component6);\n\n  function SlipSpeed(props) {\n    var _this7;\n\n    _classCallCheck(this, SlipSpeed);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(SlipSpeed).call(this, props));\n    _this7.state = {\n      value: 0\n    };\n    return _this7;\n  }\n\n  _createClass(SlipSpeed, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  0.071*岩屑直径*(岩屑密度-钻井液密度)^0.667/(钻井液密度*有效视粘度)^0.333\n      var value = 0.071 * get(this.refs.a) * Math.pow(get(this.refs.b) - get(this.refs.c), 0.667) / Math.pow(get(this.refs.c) * get(this.refs.d), 0.333);\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '岩屑直径',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '岩屑密度',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '有效视粘度',\n        code: 'd',\n        ref: 'd'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return SlipSpeed;\n}(_react2.default.Component); // 岩屑净上升速度\n\n\nvar RisingSpeed =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(RisingSpeed, _React$Component7);\n\n  function RisingSpeed(props) {\n    var _this8;\n\n    _classCallCheck(this, RisingSpeed);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(RisingSpeed).call(this, props));\n    _this8.state = {\n      value: 0\n    };\n    return _this8;\n  }\n\n  _createClass(RisingSpeed, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  环空返速-岩屑滑落速度\n      var value = get(this.refs.a) - get(this.refs.b);\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value,\n        initLoopValue: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '环空返速',\n        code: 'a',\n        ref: 'a',\n        defaultValue: this.state.initLoopValue\n      }), _react2.default.createElement(_Input2.default, {\n        name: '岩屑滑落速度',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this9 = this;\n\n      this.eventListener = document.addEventListener('triggerLoop', function (event) {\n        _this9.setState({\n          initLoopValue: event.loopValue\n        });\n      }, false);\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return RisingSpeed;\n}(_react2.default.Component); // 流性指数\n\n\nvar FlowIndex =\n/*#__PURE__*/\nfunction (_React$Component8) {\n  _inherits(FlowIndex, _React$Component8);\n\n  function FlowIndex(props) {\n    var _this10;\n\n    _classCallCheck(this, FlowIndex);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(FlowIndex).call(this, props));\n    _this10.state = {\n      value: 0\n    };\n    return _this10;\n  }\n\n  _createClass(FlowIndex, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  3.322 * Math.log10(Ф600 / Ф300)\n      var value = 3.322 * Math.log10(get(this.refs.a) / get(this.refs.b));\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: 'Ф600',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: 'Ф300',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return FlowIndex;\n}(_react2.default.Component); // 稠度系数\n\n\nvar Coefficient =\n/*#__PURE__*/\nfunction (_React$Component9) {\n  _inherits(Coefficient, _React$Component9);\n\n  function Coefficient(props) {\n    var _this11;\n\n    _classCallCheck(this, Coefficient);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Coefficient).call(this, props));\n    _this11.state = {\n      value: 0\n    };\n    return _this11;\n  }\n\n  _createClass(Coefficient, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  (0.511 * Ф300) / Math.pow(511, 3.322 * Math.log10(Ф600 / Ф300))\n      var value = 0.511 * get(this.refs.b) / Math.pow(511, 3.322 * Math.log10(get(this.refs.a) / get(this.refs.b)));\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: 'Ф600',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: 'Ф300',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Coefficient;\n}(_react2.default.Component); // 井眼净化能力\n\n\nvar Ability =\n/*#__PURE__*/\nfunction (_React$Component10) {\n  _inherits(Ability, _React$Component10);\n\n  function Ability(props) {\n    var _this12;\n\n    _classCallCheck(this, Ability);\n\n    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(Ability).call(this, props));\n    _this12.state = {\n      value: 0,\n      initLoopValue: ''\n    };\n    return _this12;\n  }\n\n  _createClass(Ability, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  岩屑净上升速度/环空返速*100%\n      var value = get(this.refs.a) / get(this.refs.b) * 100;\n      this.props.setValue(value, this.props.code, this.props.side);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '岩屑净上升速度',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '环空返速',\n        code: 'b',\n        ref: 'b',\n        defaultValue: this.state.initLoopValue\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this13 = this;\n\n      this.eventListener = document.addEventListener('triggerLoop', function (event) {\n        _this13.setState({\n          initLoopValue: event.loopValue\n        });\n      }, false);\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return Ability;\n}(_react2.default.Component);\n\nvar Total =\n/*#__PURE__*/\nfunction (_React$Component11) {\n  _inherits(Total, _React$Component11);\n\n  function Total(props) {\n    var _this14;\n\n    _classCallCheck(this, Total);\n\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Total).call(this, props));\n    _this14.state = {\n      input: [{\n        label: '泵排量',\n        value: ''\n      }, {\n        label: '钻井液密度',\n        value: ''\n      }, {\n        label: '井眼直径',\n        value: ''\n      }, {\n        label: '钻具外径',\n        value: ''\n      }, {\n        label: 'Ф600',\n        value: ''\n      }, {\n        label: 'Ф300',\n        value: ''\n      }, {\n        label: '岩屑直径',\n        value: ''\n      }, {\n        label: '有效视粘度',\n        value: ''\n      }, {\n        label: '岩屑密度',\n        value: 2.5\n      }],\n      output: [{\n        label: '流性指数',\n        value: 0\n      }, {\n        label: '稠度系数',\n        value: 0\n      }, {\n        label: '表现粘度',\n        value: 0\n      }, {\n        label: '塑性粘度',\n        value: 0\n      }, {\n        label: '动切力',\n        value: 0\n      }, {\n        label: '动塑比',\n        value: 0\n      }, {\n        label: '环空返速',\n        value: 0\n      }, {\n        label: '岩屑滑落速度',\n        value: 0\n      }, {\n        label: '岩屑净上升速度',\n        value: 0\n      }, {\n        label: '井眼净化能力',\n        value: 0\n      }]\n    };\n    _this14.formula = ['流性指数 = 3.322 * Math.log10(Ф600 / Ф300)', '稠度系数 = (0.511 * Ф300) / Math.pow(511, 3.322 * Math.log10(Ф600 / Ф300))', '表现粘度 = Ф600 / 2', '塑性粘度 = Ф600 -Ф300', '动切力 = 0.479 * (2*Ф300-Ф600)', '动塑比 = 动切力/塑性粘度', '环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))', '有效视粘度=塑性粘度+0.112*((井眼直径-钻具外径)*动切力/环空返速)', '岩屑滑落速度 = 0.071*岩屑直径*(岩屑密度-钻井液密度)^0.667/(钻井液密度*有效视粘度)^0.333', '岩屑净上升速度 = 环空返速-岩屑滑落速度', '井眼净化能力 = 岩屑净上升速度/环空返速*100%'];\n    return _this14;\n  } // 如果算不出来，返回0\n\n\n  _createClass(Total, [{\n    key: \"getValidate\",\n    value: function getValidate(val) {\n      if (isNaN(val) || val === Infinity) {\n        return 0;\n      }\n\n      return (+val).toFixed(2);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var inputs = Object.assign(this.state.input, []);\n      var outputs = Object.assign(this.state.output, []);\n      inputs.forEach(function (item) {\n        if (item.label !== '岩屑密度') {\n          item.value = window.localStorage.getItem(item.label);\n        }\n      });\n      outputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      this.setState({\n        input: inputs,\n        output: outputs\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(label) {\n      var unit = this.totalParams.filter(function (item) {\n        return item.label === label;\n      });\n      return Number(this.getValidate(unit[0].value));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(inputParams) {\n      this.totalParams = inputParams; // v: 环空返速\n\n      var v = 1.2732 * Math.pow(10, 3) * this.getValue('泵排量') / (Math.pow(this.getValue('井眼直径'), 2) - Math.pow(this.getValue('钻具外径'), 2)); // v5: 动切力\n\n      var v5 = 0.479 * (2 * this.getValue('Ф300') - this.getValue('Ф600')); // v4: 塑性粘度\n\n      var v4 = this.getValue('Ф600') - this.getValue('Ф300'); // v6: 有效视粘度\n\n      var v6 = v4 + 0.112 * (this.getValue('井眼直径') - this.getValue('钻具外径')) * v5 / v; // v2: 岩屑滑落速度\n\n      debugger;\n      var tmp1 = Math.pow(this.getValue('岩屑密度') - this.getValue('钻井液密度'), 0.667);\n      var tmp2 = Math.pow(this.getValue('钻井液密度') * this.getValue('有效视粘度'), 0.333);\n      var v2 = 0.071 * this.getValue('岩屑直径') * tmp1 / tmp2; // v3: 岩屑净上升速度\n\n      var v3 = v - v2;\n      var outputs = Object.assign(this.state.output, []); // 流性指数\n\n      outputs[0].value = this.getValidate(3.322 * Math.log10(this.getValue('Ф600') / this.getValue('Ф300'))); // 稠度系数\n\n      outputs[1].value = this.getValidate(0.511 * this.getValue('Ф300') / Math.pow(511, 3.322 * Math.log10(this.getValue('Ф600') / this.getValue('Ф300')))); // 表观粘度\n\n      outputs[2].value = this.getValidate(this.getValue('Ф600') / 2); // 塑性粘度\n\n      outputs[3].value = this.getValidate(v4); // 动切力\n\n      outputs[4].value = this.getValidate(v5); // 动塑比\n\n      outputs[5].value = this.getValidate(v5 / v4); // 环空返速\n\n      outputs[6].value = this.getValidate(v); // 岩屑滑落速度\n\n      outputs[7].value = this.getValidate(v2); // 岩屑净上升速度\n\n      outputs[8].value = this.getValidate(v3); // 井眼净化能力\n\n      outputs[9].value = this.getValidate(v3 / v * 100);\n      outputs.forEach(function (item) {\n        window.localStorage.setItem(item.label, item.value);\n      });\n      this.setState({\n        output: outputs\n      });\n      this.props.setBack(outputs);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_FinalCalculate2.default, {\n        inputParams: this.state.input,\n        outputParams: this.state.output,\n        setValue: this.setValue.bind(this),\n        title: '净化能力',\n        formula: this.formula\n      });\n    }\n  }]);\n\n  return Total;\n}(_react2.default.Component);\n\nmodule.exports = {\n  Viscosity: Viscosity,\n  PlasticViscosity: PlasticViscosity,\n  YieldPoint: YieldPoint,\n  FreezePlastic: FreezePlastic,\n  Loop: Loop,\n  SlipSpeed: SlipSpeed,\n  RisingSpeed: RisingSpeed,\n  FlowIndex: FlowIndex,\n  Coefficient: Coefficient,\n  Ability: Ability,\n  Total: Total\n};\n\n//# sourceURL=webpack:///./src/todoList/component/purify/PurCalculateMode.jsx?");

/***/ })

})