webpackHotUpdate("pageOne",{

/***/ "./src/todoList/component/analysis/CalculatMode.jsx":
/*!**********************************************************!*\
  !*** ./src/todoList/component/analysis/CalculatMode.jsx ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Input = __webpack_require__(/*! ../common/Input.jsx */ \"./src/todoList/component/common/Input.jsx\");\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _FinalCalculate = __webpack_require__(/*! ../common/FinalCalculate.jsx */ \"./src/todoList/component/common/FinalCalculate.jsx\");\n\nvar _FinalCalculate2 = _interopRequireDefault(_FinalCalculate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction get(ref) {\n  return +ref.refs[Object.keys(ref.refs)[0]].value;\n}\n\nvar event = document.createEvent('HTMLEvents');\n\nfunction getDefaultValue(label) {\n  return +window.localStorage.getItem(label) || 1;\n} // 如果算不出来，返回0\n\n\nfunction getValidate(val) {\n  if (isNaN(val) || val === Infinity) {\n    return 0;\n  }\n\n  return (+val).toFixed(2);\n} // 泵排量计算公式\n\n\nvar Pump =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Pump, _React$Component);\n\n  function Pump(props) {\n    var _this;\n\n    _classCallCheck(this, Pump);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pump).call(this, props));\n    _this.state = {\n      value: 0,\n      diameter: 0,\n      chongcheng: 0,\n      taoshu: 0,\n      chongshu: 0,\n      xiaolv: 0,\n      isShrink: true\n    };\n    _this.formula = ['泵排量 = π*（缸套直径/2）^2*活塞冲程*缸套数*冲数*上水效率(%)'];\n    return _this;\n  }\n\n  _createClass(Pump, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        value: getValidate(window.localStorage.getItem('泵排量')),\n        diameter: window.localStorage.getItem('管套直径'),\n        chongcheng: window.localStorage.getItem('活塞冲程'),\n        taoshu: window.localStorage.getItem('缸套数'),\n        chongshu: window.localStorage.getItem('冲数'),\n        xiaolv: window.localStorage.getItem('上水效率')\n      });\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate() {\n      var value = Math.PI * Math.pow(get(this.refs.a) / 2, 2) * get(this.refs.b) * get(this.refs.c) * get(this.refs.d) * get(this.refs.e);\n      this.props.setValue(getValidate(value), this.props.code);\n      event.initEvent(\"triggerPump\", true, true);\n      event.pumpValue = getValidate(value);\n      document.dispatchEvent(event);\n      window.localStorage.setItem('管套直径', getValidate(get(this.refs.a)));\n      window.localStorage.setItem('活塞冲程', getValidate(get(this.refs.b)));\n      window.localStorage.setItem('缸套数', getValidate(get(this.refs.c)));\n      window.localStorage.setItem('冲数', getValidate(get(this.refs.d)));\n      window.localStorage.setItem('上水效率', 0.9);\n      window.localStorage.setItem('泵排量', getValidate(value));\n      this.setState({\n        value: getValidate(value)\n      });\n    }\n  }, {\n    key: \"renderFormula\",\n    value: function renderFormula() {\n      var list = [];\n      this.formula.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"p\", {\n          key: key\n        }, \" \", item, \" \"));\n      });\n      return list;\n    }\n  }, {\n    key: \"toggleFormula\",\n    value: function toggleFormula() {\n      this.setState({\n        isShrink: !this.state.isShrink\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"IO\"\n      }, \"\\u8F93\\u5165\"), _react2.default.createElement(_Input2.default, {\n        name: '管套直径',\n        code: 'a',\n        ref: 'a',\n        defaultValue: this.state.diameter\n      }), _react2.default.createElement(_Input2.default, {\n        name: '活塞冲程',\n        code: 'b',\n        ref: 'b',\n        defaultValue: this.state.chongcheng\n      }), _react2.default.createElement(_Input2.default, {\n        name: '缸套数',\n        code: 'c',\n        ref: 'c',\n        defaultValue: this.state.taoshu\n      }), _react2.default.createElement(_Input2.default, {\n        name: '冲数',\n        code: 'd',\n        ref: 'd',\n        defaultValue: this.state.chongshu\n      }), _react2.default.createElement(_Input2.default, {\n        name: '上水效率（%）',\n        code: 'e',\n        ref: 'e',\n        defaultValue: 0.9,\n        type: 'percent'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\"), _react2.default.createElement(\"div\", {\n        className: \"result-panel\"\n      }, \"\\u6CF5\\u6392\\u91CF\\uFF1A\", this.state.value), _react2.default.createElement(\"div\", {\n        className: \"config-formula \".concat(this.state.isShrink === true ? 'shrink' : 'isOpen')\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula\",\n        onClick: this.toggleFormula.bind(this)\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula-text\"\n      }, \"\\u8BA1\\u7B97\\u516C\\u5F0F\"), _react2.default.createElement(\"div\", {\n        className: \"triangle\"\n      }, this.state.isShrink === true ? _react2.default.createElement(\"img\", {\n        src: \"./image/icon/up.png\"\n      }) : _react2.default.createElement(\"img\", {\n        src: \"./image/icon/down.png\"\n      }))), this.renderFormula()), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Pump;\n}(_react2.default.Component); // 循环压耗\n\n\nvar Cycle =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Cycle, _React$Component2);\n\n  function Cycle(props) {\n    var _this2;\n\n    _classCallCheck(this, Cycle);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Cycle).call(this, props));\n    _this2.state = {\n      value: 0,\n      C2: 3117,\n      C3: 0.006193,\n      C4: 1.078,\n      initPumpValue: '',\n      unit: 'normal',\n      isShrink: true,\n      output: [{\n        label: '地面管汇压耗',\n        value: 0\n      }, {\n        label: '钻杆内循环压耗',\n        value: 0\n      }, {\n        label: '加重钻杆内循环压耗',\n        value: 0\n      }, {\n        label: '钻铤内循环压耗',\n        value: 0\n      }, {\n        label: '钻杆环空压耗',\n        value: 0\n      }, {\n        label: '加重钻杆环空压耗',\n        value: 0\n      }, {\n        label: '钻铤环空压耗',\n        value: 0\n      }, {\n        label: '钻杆接箍环空压耗',\n        value: 0\n      }, {\n        label: '加重钻杆接箍环空压耗',\n        value: 0\n      }, {\n        label: '总循环压耗',\n        value: 0\n      }]\n    };\n    _this2.formula = ['钻具环空压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/(井眼直径-钻具外径)^3/(井眼直径+钻具外径)^1.8', '钻具内循环压耗 = 7628*塑性粘度^0.2*钻井液密度^0.8*泵排量^1.8*钻具长度/钻具内径^4.82', '公式中钻具指的就是钻杆、加重钻杆、钻铤、钻杆接箍、加重钻杆接箍'];\n    return _this2;\n  } // 环空压耗统一计算公式, param1: 钻具长度, param2: 钻具外径\n\n\n  _createClass(Cycle, [{\n    key: \"getPressure\",\n    value: function getPressure(param1, param2) {\n      return 7628 * Math.pow(get(this.refs.c), 0.2) * Math.pow(get(this.refs.b), 0.8) * Math.pow(get(this.refs.a), 1.8) * param1 / Math.pow(get(this.refs.d) - param2, 3) / Math.pow(get(this.refs.d) + param2, 1.8);\n    } // 内循环压耗统一计算公式, param1: 钻具长度, param2: 钻具内径\n\n  }, {\n    key: \"getRecycle\",\n    value: function getRecycle(param1, param2) {\n      return 7628 * Math.pow(get(this.refs.c), 0.2) * Math.pow(get(this.refs.b), 0.8) * Math.pow(get(this.refs.a), 1.8) * param1 / Math.pow(param2, 4.82);\n    }\n  }, {\n    key: \"calcluate1\",\n    value: function calcluate1() {\n      // Psur 地面管汇压耗 = 地面管汇摩阻系数*钻井液密度*（泵排量/100）^1.86*9.818\n      var Psur = get(this.refs.e) * get(this.refs.b) * Math.pow(get(this.refs.a) / 100, 1.86) * 9.818; // v1: 钻杆内循环压耗\n\n      var v1 = this.getRecycle(get(this.refs.m), get(this.refs.f)); // v2: 加重钻杆内循环压耗\n\n      var v2 = this.getRecycle(get(this.refs.n), get(this.refs.g)); // v3: 钻铤内循环压耗\n\n      var v3 = this.getRecycle(get(this.refs.o), get(this.refs.h)); // v4: 钻杆环空压耗\n\n      var v4 = this.getPressure(get(this.refs.m), get(this.refs.i)); // v5: 加重钻杆环空压耗\n\n      var v5 = this.getPressure(get(this.refs.n), get(this.refs.j)); // v6: 钻铤环空压耗\n\n      var v6 = this.getPressure(get(this.refs.o), get(this.refs.k)); // v7: 钻杆接箍环空压耗, lenP: 钻杆接箍长度，计算公式为 钻杆长度/9.5 * 0.5\n\n      var lenP = getValidate(get(this.refs.m) / 9.5 * 0.5);\n      var v7 = this.getPressure(lenP, get(this.refs.l)); // v8: 加重钻杆接箍环空压耗, lenQ: 加重钻杆接箍，计算公式为 加重钻杆长度/9.5 * 0.5\n\n      var lenQ = getValidate(get(this.refs.n) / 9.5 * 0.5);\n      var v8 = this.getPressure(lenQ, get(this.refs.r));\n      var value = v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8;\n      this.props.setValue(getValidate(value), this.props.code);\n      event.initEvent(\"triggerCycle\", true, true);\n      event.loopValue = getValidate(value);\n      document.dispatchEvent(event);\n      var outputs = Object.assign(this.state.output, []);\n      outputs[0].value = getValidate(Psur);\n      outputs[1].value = getValidate(v1); // 钻杆内循环压耗\n\n      outputs[2].value = getValidate(v2); // 加重钻杆内循环压耗\n\n      outputs[3].value = getValidate(v3); // 钻铤内循环压耗\n\n      outputs[4].value = getValidate(v4); // 钻杆环空压耗\n\n      outputs[5].value = getValidate(v5); // 加重钻杆环空压耗\n\n      outputs[6].value = getValidate(v6); // 钻铤环空压耗\n\n      outputs[7].value = getValidate(v7); // 钻杆接箍环空压耗\n\n      outputs[8].value = getValidate(v8); // 加重钻杆接箍环空压耗\n\n      outputs[9].value = getValidate(value);\n      window.localStorage.setItem('循环压耗', outputs[9].value);\n      this.setState({\n        output: outputs\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      var list = [];\n      this.state.output.forEach(function (item) {\n        list.push(_react2.default.createElement(\"div\", {\n          key: item.label,\n          className: \"output-option\"\n        }, _react2.default.createElement(\"label\", {\n          className: \"input-label\"\n        }, \" \", item.label, \"\\uFF1A \"), _react2.default.createElement(\"div\", {\n          className: \"input-div\"\n        }, _react2.default.createElement(\"span\", null, \" \", item.value, \" \"))));\n      });\n      return list;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        value: getValidate(window.localStorage.getItem('循环压耗'))\n      });\n    }\n  }, {\n    key: \"renderFormula\",\n    value: function renderFormula() {\n      var list = [];\n      this.formula.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"p\", {\n          key: key\n        }, \" \", item, \" \"));\n      });\n      return list;\n    }\n  }, {\n    key: \"toggleFormula\",\n    value: function toggleFormula() {\n      this.setState({\n        isShrink: !this.state.isShrink\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"IO\"\n      }, \"\\u8F93\\u5165\"), _react2.default.createElement(_Input2.default, {\n        name: \"\\u6CF5\\u6392\\u91CF\",\n        code: 'a',\n        ref: \"a\",\n        defaultValue: this.state.initPumpValue\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u4E95\\u6DB2\\u5BC6\\u5EA6\",\n        code: 'b',\n        ref: \"b\",\n        defaultValue: getDefaultValue('钻井液密度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u5851\\u6027\\u7C98\\u5EA6\",\n        code: 'c',\n        ref: \"c\",\n        defaultValue: getDefaultValue('塑性粘度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u4E95\\u773C\\u76F4\\u5F84\",\n        code: 'd',\n        ref: \"d\",\n        defaultValue: getDefaultValue('井眼直径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u5730\\u9762\\u7BA1\\u6C47\\u6469\\u963B\\u7CFB\\u6570\",\n        code: 'e',\n        ref: \"e\",\n        defaultValue: getDefaultValue('地面管汇摩阻系数')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u5185\\u5F84\",\n        code: 'f',\n        ref: \"f\",\n        defaultValue: getDefaultValue('钻杆内径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u52A0\\u91CD\\u94BB\\u6746\\u5185\\u5F84\",\n        code: 'g',\n        ref: \"g\",\n        defaultValue: getDefaultValue('加重钻杆内径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u94E4\\u5185\\u5F84\",\n        code: 'h',\n        ref: \"h\",\n        defaultValue: getDefaultValue('钻铤内径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u5916\\u5F84\",\n        code: 'i',\n        ref: \"i\",\n        defaultValue: getDefaultValue('钻杆外径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u52A0\\u91CD\\u94BB\\u6746\\u5916\\u5F84\",\n        code: 'j',\n        ref: \"j\",\n        defaultValue: getDefaultValue('加重钻杆外径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u94E4\\u5916\\u5F84\",\n        code: 'k',\n        ref: \"k\",\n        defaultValue: getDefaultValue('钻铤外径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u63A5\\u7B8D\\u5916\\u5F84\",\n        code: 'l',\n        ref: \"l\",\n        defaultValue: getDefaultValue('钻杆接箍外径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u52A0\\u91CD\\u94BB\\u6746\\u63A5\\u7B8D\\u5916\\u5F84\",\n        code: 'r',\n        ref: \"r\",\n        defaultValue: getDefaultValue('加重钻杆接箍外径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u957F\\u5EA6\",\n        code: 'm',\n        ref: \"m\",\n        defaultValue: getDefaultValue('钻杆长度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u52A0\\u91CD\\u94BB\\u6746\\u957F\\u5EA6\",\n        code: 'n',\n        ref: \"n\",\n        defaultValue: getDefaultValue('加重钻杆长度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u94E4\\u957F\\u5EA6\",\n        code: 'o',\n        ref: \"o\",\n        defaultValue: getDefaultValue('钻铤长度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u63A5\\u7B8D\\u957F\\u5EA6\",\n        code: 'p',\n        ref: \"p\",\n        defaultValue: getDefaultValue('钻杆接箍长度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u52A0\\u91CD\\u94BB\\u6746\\u63A5\\u7B8D\\u957F\\u5EA6\",\n        code: 'q',\n        ref: \"q\",\n        defaultValue: getDefaultValue('加重钻杆接箍长度')\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\"), _react2.default.createElement(\"div\", {\n        className: \"result-panel\"\n      }, this.renderResult()), _react2.default.createElement(\"div\", {\n        className: \"config-formula \".concat(this.state.isShrink === true ? 'shrink' : 'isOpen')\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula\",\n        onClick: this.toggleFormula.bind(this)\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula-text\"\n      }, \"\\u8BA1\\u7B97\\u516C\\u5F0F\"), _react2.default.createElement(\"div\", {\n        className: \"triangle\"\n      }, this.state.isShrink === true ? _react2.default.createElement(\"img\", {\n        src: \"./image/icon/up.png\"\n      }) : _react2.default.createElement(\"img\", {\n        src: \"./image/icon/down.png\"\n      }))), this.renderFormula()), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calcluate1.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (this.props.isSolo === 'solo') {\n        var val = window.localStorage.getItem('泵排量');\n        this.setState({\n          initPumpValue: val\n        });\n      } else {\n        this.eventListener = document.addEventListener('triggerPump', function (event) {\n          _this3.setState({\n            initPumpValue: event.pumpValue\n          });\n        }, false);\n      }\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return Cycle;\n}(_react2.default.Component); // 钻头压降\n\n\nvar Drill =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Drill, _React$Component3);\n\n  function Drill(props) {\n    var _this4;\n\n    _classCallCheck(this, Drill);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Drill).call(this, props));\n    _this4.state = {\n      value: 0,\n      initCycleValue: '',\n      isShrink: true\n    };\n    _this4.formula = ['钻头压降 = 泵压 - 循环压耗'];\n    return _this4;\n  }\n\n  _createClass(Drill, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        value: getValidate(window.localStorage.getItem('钻头压降')),\n        initCycleValue: getValidate(window.localStorage.getItem('循环压耗'))\n      });\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate() {\n      // 钻头压降 = 泵压 - 循环压耗\n      var value = get(this.refs.a) - get(this.refs.b);\n      this.props.setValue(getValidate(value), this.props.code);\n      window.localStorage.setItem('钻头压降', getValidate(value));\n      window.localStorage.setItem('泵压', getValidate(get(this.refs.a)));\n      window.localStorage.setItem('循环压耗', getValidate(get(this.refs.b)));\n      this.setState({\n        value: getValidate(value)\n      });\n    }\n  }, {\n    key: \"renderFormula\",\n    value: function renderFormula() {\n      var list = [];\n      this.formula.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"p\", {\n          key: key\n        }, \" \", item, \" \"));\n      });\n      return list;\n    }\n  }, {\n    key: \"toggleFormula\",\n    value: function toggleFormula() {\n      this.setState({\n        isShrink: !this.state.isShrink\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"IO\"\n      }, \"\\u8F93\\u5165\"), _react2.default.createElement(_Input2.default, {\n        name: \"\\u6CF5\\u538B\",\n        code: 'a',\n        ref: \"a\",\n        defaultValue: getDefaultValue('泵压')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u5FAA\\u73AF\\u538B\\u8017\",\n        code: 'b',\n        ref: \"b\",\n        defaultValue: this.state.initCycleValue\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\"), _react2.default.createElement(\"div\", {\n        className: \"result-panel\"\n      }, \"\\u94BB\\u5934\\u538B\\u964D\\uFF1A\", this.state.value), _react2.default.createElement(\"div\", {\n        className: \"config-formula \".concat(this.state.isShrink === true ? 'shrink' : 'isOpen')\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula\",\n        onClick: this.toggleFormula.bind(this)\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula-text\"\n      }, \"\\u8BA1\\u7B97\\u516C\\u5F0F\"), _react2.default.createElement(\"div\", {\n        className: \"triangle\"\n      }, this.state.isShrink === true ? _react2.default.createElement(\"img\", {\n        src: \"./image/icon/up.png\"\n      }) : _react2.default.createElement(\"img\", {\n        src: \"./image/icon/down.png\"\n      }))), this.renderFormula()), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this5 = this;\n\n      this.eventListener = document.addEventListener('triggerCycle', function (event) {\n        _this5.setState({\n          initCycleValue: event.loopValue\n        });\n      }, false);\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return Drill;\n}(_react2.default.Component); // 流变参数\n\n\nvar Params =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(Params, _React$Component4);\n\n  function Params(props) {\n    var _this6;\n\n    _classCallCheck(this, Params);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Params).call(this, props));\n    _this6.state = {\n      output: [{\n        label: '流性指数',\n        value: 0\n      }, {\n        label: '稠度系数',\n        value: 0\n      }, {\n        label: '表观粘度',\n        value: 0\n      }, {\n        label: '塑性粘度',\n        value: 0\n      }, {\n        label: '动切力',\n        value: 0\n      }, {\n        label: '动塑比',\n        value: 0\n      }],\n      isShrink: true\n    };\n    _this6.formula = ['流性指数 = 3.322 * Math.log10(Ф600 / Ф300)', '稠度系数 = (0.511 * Ф300) / Math.pow(511, 3.322 * Math.log10(Ф600 / Ф300))', '表观粘度 = Ф600 / 2', '塑性粘度 = Ф600 -Ф300', '动切力 = 0.479 * (2*Ф300-Ф600)', '动塑比 = 动切力/塑性粘度'];\n    return _this6;\n  }\n\n  _createClass(Params, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        value: getValidate(window.localStorage.getItem('液流变参数'))\n      });\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate() {\n      // v0: 流性指数 = 3.322 * Math.log10(Ф600 / Ф300)\n      var v0 = 3.322 * Math.log10(get(this.refs.a) / get(this.refs.b)); // v1: 稠度系数\n\n      var v1 = 0.511 * get(this.refs.b) / Math.pow(511, v0); // v2: 表观粘度\n\n      var v2 = get(this.refs.a) / 2; // v3: 塑性粘度\n\n      var v3 = get(this.refs.a) - get(this.refs.b); // v4: 动切力\n\n      var v4 = 0.479 * (2 * get(this.refs.b) - get(this.refs.a)); // v5: 动塑比\n\n      var v5 = v4 / v3;\n      window.localStorage.setItem('Ф600', getValidate(get(this.refs.a)));\n      window.localStorage.setItem('Ф300', getValidate(get(this.refs.b)));\n      var outputs = Object.assign(this.state.output, []);\n      outputs[0].value = getValidate(v0);\n      outputs[1].value = getValidate(v1);\n      outputs[2].value = getValidate(v2);\n      outputs[3].value = getValidate(v3);\n      outputs[4].value = getValidate(v4);\n      outputs[5].value = getValidate(v5);\n      outputs.forEach(function (item) {\n        window.localStorage.setItem(item.label, item.value);\n      });\n      this.setState({\n        output: outputs\n      });\n      this.props.setValue(v3, this.props.code);\n    }\n  }, {\n    key: \"renderFormula\",\n    value: function renderFormula() {\n      var list = [];\n      this.formula.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"p\", {\n          key: key\n        }, \" \", item, \" \"));\n      });\n      return list;\n    }\n  }, {\n    key: \"toggleFormula\",\n    value: function toggleFormula() {\n      this.setState({\n        isShrink: !this.state.isShrink\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      var list = [];\n      this.state.output.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"div\", {\n          className: \"result-panel\",\n          key: key\n        }, item.label, \"\\uFF1A\", item.value));\n      });\n      return list;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"IO\"\n      }, \"\\u8F93\\u5165\"), _react2.default.createElement(_Input2.default, {\n        name: \"\\u0424600\",\n        code: 'a',\n        ref: \"a\",\n        defaultValue: getDefaultValue('Ф600')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u0424300\",\n        code: 'b',\n        ref: \"b\",\n        defaultValue: getDefaultValue('Ф300')\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\"), this.renderResult(), _react2.default.createElement(\"div\", {\n        className: \"config-formula \".concat(this.state.isShrink === true ? 'shrink' : 'isOpen')\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula\",\n        onClick: this.toggleFormula.bind(this)\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula-text\"\n      }, \"\\u8BA1\\u7B97\\u516C\\u5F0F\"), _react2.default.createElement(\"div\", {\n        className: \"triangle\"\n      }, this.state.isShrink === true ? _react2.default.createElement(\"img\", {\n        src: \"./image/icon/up.png\"\n      }) : _react2.default.createElement(\"img\", {\n        src: \"./image/icon/down.png\"\n      }))), this.renderFormula()), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Params;\n}(_react2.default.Component); // 环空返速\n\n\nvar Loop =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(Loop, _React$Component5);\n\n  function Loop(props) {\n    var _this7;\n\n    _classCallCheck(this, Loop);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Loop).call(this, props));\n    _this7.state = {\n      value: 0,\n      initPumpValue: '',\n      isShrink: true\n    };\n    _this7.formula = ['环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))'];\n    return _this7;\n  }\n\n  _createClass(Loop, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        value: window.localStorage.getItem('环空返速')\n      });\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate() {\n      // value 环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))\n      var value = 1.2732 * Math.pow(10, 3) * get(this.refs.a) / (Math.pow(get(this.refs.b), 2) - Math.pow(get(this.refs.c), 2));\n      this.props.setValue(getValidate(value), this.props.code);\n      event.initEvent(\"triggerLoop\", true, true);\n      event.loopValue = value;\n      window.localStorage.setItem('环空返速', getValidate(value));\n      window.localStorage.setItem('井眼直径', getValidate(get(this.refs.b)));\n      window.localStorage.setItem('钻具外径', getValidate(get(this.refs.c)));\n      document.dispatchEvent(event);\n      this.setState({\n        value: getValidate(value)\n      });\n    }\n  }, {\n    key: \"renderFormula\",\n    value: function renderFormula() {\n      var list = [];\n      this.formula.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"p\", {\n          key: key\n        }, \" \", item, \" \"));\n      });\n      return list;\n    }\n  }, {\n    key: \"toggleFormula\",\n    value: function toggleFormula() {\n      this.setState({\n        isShrink: !this.state.isShrink\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"IO\"\n      }, \"\\u8F93\\u5165\"), _react2.default.createElement(_Input2.default, {\n        name: \"\\u6CF5\\u6392\\u91CF\",\n        code: 'a',\n        ref: \"a\",\n        defaultValue: this.state.initPumpValue\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u4E95\\u773C\\u76F4\\u5F84\",\n        code: 'b',\n        ref: \"b\",\n        defaultValue: getDefaultValue('井眼直径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u5177\\u5916\\u5F84\",\n        code: 'c',\n        ref: \"c\",\n        defaultValue: getDefaultValue('钻具外径')\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\"), _react2.default.createElement(\"div\", {\n        className: \"result-panel\"\n      }, \"\\u73AF\\u7A7A\\u8FD4\\u901F\\uFF1A\", this.state.value), _react2.default.createElement(\"div\", {\n        className: \"config-formula \".concat(this.state.isShrink === true ? 'shrink' : 'isOpen')\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula\",\n        onClick: this.toggleFormula.bind(this)\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula-text\"\n      }, \"\\u8BA1\\u7B97\\u516C\\u5F0F\"), _react2.default.createElement(\"div\", {\n        className: \"triangle\"\n      }, this.state.isShrink === true ? _react2.default.createElement(\"img\", {\n        src: \"./image/icon/up.png\"\n      }) : _react2.default.createElement(\"img\", {\n        src: \"./image/icon/down.png\"\n      }))), this.renderFormula()), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this8 = this;\n\n      if (this.props.isSolo === 'solo') {\n        var val = window.localStorage.getItem('泵排量');\n        this.setState({\n          initPumpValue: val\n        });\n      } else {\n        this.eventListener = document.addEventListener('triggerPump', function (event) {\n          _this8.setState({\n            initPumpValue: event.pumpValue\n          });\n        }, false);\n      }\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return Loop;\n}(_react2.default.Component); // 流态\n\n\nvar Flow =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(Flow, _React$Component6);\n\n  function Flow(props) {\n    var _this9;\n\n    _classCallCheck(this, Flow);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(Flow).call(this, props));\n    _this9.state = {\n      a: 0,\n      b: 0,\n      c: 0,\n      unit: 'normal',\n      C23: 1.0779,\n      initLoopValue: window.localStorage.getItem('环空返速'),\n      isShrink: true,\n      output: [{\n        label: '钻杆内雷诺数',\n        value: 0\n      }, {\n        label: '环空雷诺数',\n        value: 0\n      }, {\n        label: '环空流态',\n        value: 0\n      }]\n    };\n    _this9.formula = ['有效视粘度 = 塑性粘度 + 0.112 * ((井眼直径 - 钻杆外径) * 动切力 / 环空返速)', '钻杆内雷诺数 = 928 * 钻具内液流平均流速 * 钻具内径 * 钻井液密度 * 1.0779 / 有效视粘度 * Math.pow(((3 * 流性指数+1) / (4 * 流性指数)), 钻具内流性指数)', '环空雷诺数 = 928 * 环空液流的流速 * (井眼直径 - 钻杆外径) * 钻井液密度 * 1.0779 / 有效视粘度 * Math.pow(((2 * 环空流性指数 + 1) / (3 * 环空流性指数)), 环空流性指数)', '流态用环空雷诺数和2100比较，小于2100层流，大于2100紊流'];\n    return _this9;\n  }\n\n  _createClass(Flow, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        value: window.localStorage.getItem('流态')\n      });\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate() {\n      var viscosity = getDefaultValue('塑性粘度'); // 有效视粘度 = 塑性粘度 + 0.112 * ((井眼直径 - 钻杆外径) * 动切力 / 环空返速)\n      //let Ucp = viscosity + 0.112 *(get(this.refs.g) - get(this.refs.h)) * getDefaultValue('动切力') / get(this.refs.f);\n\n      var Ucp = get(this.refs.d); // v2: 钻杆内雷诺数 = 928 * 钻具内液流平均流速 * 钻具内径 * 钻井液密度 * C23 / 有效视粘度 * Math.pow(((3 * 流性指数+1) / (4 * 流性指数)), 钻具内流性指数)\n\n      var tmp2 = Math.pow(3 / 4 + 1 / (4 * get(this.refs.e)), get(this.refs.e));\n      var v2 = 928 * get(this.refs.a) * get(this.refs.b) * get(this.refs.c) * this.state.C23 / Ucp * tmp2; // 环空雷诺数 = 928 * 环空液流的流速 * (井眼直径 - 钻杆外径) * 钻井液密度 * C23 / 有效视粘度 * Math.pow(((2 * 环空流性指数 + 1) / (3 * 环空流性指数)), 环空流性指数)\n\n      var tmp3 = Math.pow(2 / 3 + 1 / (3 * get(this.refs.e)), get(this.refs.e));\n      var Rep = 928 * get(this.refs.a) * (get(this.refs.g) - get(this.refs.h)) * get(this.refs.c) * this.state.C23 / Ucp * tmp3; // value: 流态\n\n      var value = '';\n\n      if (Rep < 2100) {\n        value = '层流';\n      } else {\n        value = '紊流';\n      }\n\n      this.props.setValue(value, this.props.code);\n      window.localStorage.setItem('流态', value);\n      window.localStorage.setItem('钻杆内雷诺数', v2);\n      window.localStorage.setItem('环空雷诺数', Rep);\n      window.localStorage.setItem('钻杆内钻井液平均流速', get(this.refs.a));\n      window.localStorage.setItem('钻杆内径', get(this.refs.b));\n      window.localStorage.setItem('钻井液密度', get(this.refs.c));\n      window.localStorage.setItem('有效视粘度', get(this.refs.d));\n      window.localStorage.setItem('流性指数', get(this.refs.e));\n      window.localStorage.setItem('环空返速', get(this.refs.f));\n      window.localStorage.setItem('井眼直径', get(this.refs.g));\n      window.localStorage.setItem('钻杆外径', get(this.refs.h));\n      var outputs = Object.assign(this.state.output, []);\n      outputs[0].value = getValidate(v2);\n      outputs[1].value = getValidate(Rep);\n      outputs[2].value = value;\n      outputs.forEach(function (item) {\n        window.localStorage.setItem(item.label, item.value);\n      });\n      this.setState({\n        output: outputs\n      });\n    }\n  }, {\n    key: \"renderFormula\",\n    value: function renderFormula() {\n      var list = [];\n      this.formula.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"p\", {\n          key: key\n        }, \" \", item, \" \"));\n      });\n      return list;\n    }\n  }, {\n    key: \"toggleFormula\",\n    value: function toggleFormula() {\n      this.setState({\n        isShrink: !this.state.isShrink\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      var list = [];\n      this.state.output.forEach(function (item, key) {\n        list.push(_react2.default.createElement(\"div\", {\n          className: \"result-panel\",\n          key: key\n        }, item.label, \"\\uFF1A\", item.value));\n      });\n      return list;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(\"div\", {\n        className: \"IO\"\n      }, \"\\u8F93\\u5165\"), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u5185\\u94BB\\u4E95\\u6DB2\\u5E73\\u5747\\u6D41\\u901F\",\n        code: 'a',\n        ref: 'a',\n        defaultValue: getDefaultValue('钻杆内钻井液平均流速')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u5185\\u5F84\",\n        code: 'b',\n        ref: 'b',\n        defaultValue: getDefaultValue('钻杆内径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u4E95\\u6DB2\\u5BC6\\u5EA6\",\n        code: 'c',\n        ref: 'c',\n        defaultValue: getDefaultValue('钻井液密度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u6709\\u6548\\u89C6\\u7C98\\u5EA6\",\n        code: 'd',\n        ref: 'd',\n        defaultValue: getDefaultValue('有效视粘度')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u6D41\\u6027\\u6307\\u6570\",\n        code: 'e',\n        ref: 'e',\n        defaultValue: getDefaultValue('流性指数')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u73AF\\u7A7A\\u8FD4\\u901F\",\n        code: 'f',\n        ref: 'f',\n        defaultValue: this.state.initLoopValue\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u4E95\\u773C\\u76F4\\u5F84\",\n        code: 'g',\n        ref: 'g',\n        defaultValue: getDefaultValue('井眼直径')\n      }), _react2.default.createElement(_Input2.default, {\n        name: \"\\u94BB\\u6746\\u5916\\u5F84\",\n        code: 'h',\n        ref: 'h',\n        defaultValue: getDefaultValue('钻杆外径')\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\"), this.renderResult(), _react2.default.createElement(\"div\", {\n        className: \"config-formula \".concat(this.state.isShrink === true ? 'shrink' : 'isOpen')\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula\",\n        onClick: this.toggleFormula.bind(this)\n      }, _react2.default.createElement(\"div\", {\n        className: \"expand-formula-text\"\n      }, \"\\u8BA1\\u7B97\\u516C\\u5F0F\"), _react2.default.createElement(\"div\", {\n        className: \"triangle\"\n      }, this.state.isShrink === true ? _react2.default.createElement(\"img\", {\n        src: \"./image/icon/up.png\"\n      }) : _react2.default.createElement(\"img\", {\n        src: \"./image/icon/down.png\"\n      }))), this.renderFormula()), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this10 = this;\n\n      this.eventListener = document.addEventListener('triggerLoop', function (event) {\n        _this10.setState({\n          initLoopValue: event.loopValue\n        });\n      }, false);\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return Flow;\n}(_react2.default.Component);\n\nvar Total =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(Total, _React$Component7);\n\n  function Total(props) {\n    var _this11;\n\n    _classCallCheck(this, Total);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Total).call(this, props));\n    _this11.state = {\n      input: [{\n        label: '缸套直径',\n        value: ''\n      }, {\n        label: '活塞冲程',\n        value: ''\n      }, {\n        label: '缸套数',\n        value: ''\n      }, {\n        label: '冲数',\n        value: ''\n      }, {\n        label: '上水效率',\n        value: ''\n      }, {\n        label: '泵排量',\n        value: ''\n      }, {\n        label: '钻井液密度',\n        value: ''\n      }, {\n        label: '塑性粘度',\n        value: ''\n      }, {\n        label: '井眼直径',\n        value: ''\n      }, {\n        label: '地面管汇摩阻系数',\n        value: ''\n      }, {\n        label: '钻杆加重钻杆钻铤内径',\n        value: ''\n      }, {\n        label: '钻杆加重钻杆钻铤外径',\n        value: ''\n      }, {\n        label: '钻杆接箍外径',\n        value: ''\n      }, {\n        label: '钻杆加重钻杆钻铤长度',\n        value: ''\n      }, {\n        label: '泵压',\n        value: ''\n      }, {\n        label: '动切力',\n        value: ''\n      }, {\n        label: 'Ф600',\n        value: ''\n      }, {\n        label: 'Ф300',\n        value: ''\n      }, {\n        label: '钻杆内钻井液平均流速',\n        value: ''\n      }, {\n        label: '有效视粘度',\n        value: ''\n      }, {\n        label: '流性指数',\n        value: ''\n      }, {\n        label: '环空返速',\n        value: ''\n      }],\n      output: [{\n        label: '泵排量',\n        value: 0\n      }, {\n        label: '循环压耗',\n        value: 0\n      }, {\n        label: '钻头压降',\n        value: 0\n      }, {\n        label: '液流变参数',\n        value: 0\n      }, {\n        label: '环空返速',\n        value: 0\n      }, {\n        label: '流态',\n        value: 0\n      }]\n    };\n    _this11.formula = ['泵排量 = π*（缸套直径/2）^2*活塞冲程*缸套数*冲数*上水效率', '循环压耗 = 地面管汇压耗' + '钻杆内循环压耗' + '加重钻杆内循环压耗' + '钻铤内循环压耗' + '钻杆环空压耗' + '加重钻杆环空压耗' + '钻铤环空压耗' + '钻杆接箍环空压耗' + '加重钻杆接箍环空压耗', '钻头压降 = 泵压 - 循环压耗', '液流变参数 = Ф600 - Ф300', '环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))', '有效视粘度 = 塑性粘度 + 0.112 * ((井眼直径 - 钻杆外径) * 动切力 / 环空返速)', '环空雷诺数 = 928 * 环空液流的流速 * (井眼直径 - 钻杆外径) * 钻井液密度 * 1.0779 / 有效视粘度 * Math.pow(((2 * 环空流性指数 + 1) / (3 * 环空流性指数)), 环空流性指数)', '流态 = 环空雷诺数 < 2100 ? 层流 : 紊流'];\n    return _this11;\n  }\n\n  _createClass(Total, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var inputs = Object.assign(this.state.input, []);\n      var outputs = Object.assign(this.state.output, []);\n      inputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      outputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      this.setState({\n        input: inputs,\n        output: outputs\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(label) {\n      try {\n        var unit = this.totalParams.filter(function (item) {\n          return item.label === label;\n        });\n        return +unit[0].value;\n      } catch (e) {\n        console.log(label);\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(inputParams) {\n      this.totalParams = inputParams;\n      var outputs = Object.assign(this.state.output, []); // v1: 环空返速\n\n      var v1 = 1.2732 * Math.pow(10, 3) * this.getValue('泵排量') / (Math.pow(this.getValue('井眼直径'), 2) - Math.pow(this.getValue('钻杆加重钻杆钻铤外径'), 2));\n      outputs[0].value = Math.PI * Math.pow(this.getValue('缸套直径') / 2, 2) * this.getValue('活塞冲程') * this.getValue('缸套数') * this.getValue('冲数') * this.getValue('上水效率');\n      outputs[1].value = this.getRecycle();\n      outputs[2].value = this.getValue('泵压') - this.getRecycle();\n      outputs[3].value = this.getValue('Ф600') - this.getValue('Ф300');\n      outputs[4].value = v1; // v2: 有效视粘度\n\n      var v2 = this.getValue('塑性粘度') + 0.112 * ((this.getValue('井眼直径') - this.getValue('钻杆加重钻杆钻铤外径')) * this.getValue('动切力') / v1); // v3: 环空的雷诺数\n\n      var v3 = 928 * this.getValue('钻杆内钻井液平均流速') * (this.getValue('井眼直径') - this.getValue('钻杆加重钻杆钻铤外径')) * this.getValue('钻井液密度') * 1.0779 / v2 * Math.pow((2 * this.getValue('流性指数') + 1) / (3 * this.getValue('流性指数')), this.getValue('流性指数'));\n      outputs[5].value = v3 < 2100 ? '层流' : '紊流';\n      outputs.forEach(function (item) {\n        window.localStorage.setItem(item.label, item.value);\n      });\n      this.setState({\n        output: outputs\n      });\n      this.props.setBack(outputs);\n    } // 循环压耗\n\n  }, {\n    key: \"getRecycle\",\n    value: function getRecycle() {\n      // 地面管汇压耗' + '钻杆内循环压耗' + '加重钻杆内循环压耗' + '钻铤内循环压耗' + '钻杆环空压耗' + '加重钻杆环空压耗' + '钻铤环空压耗' + '钻杆接箍环空压耗' + '加重钻杆接箍环空压耗\n      // v1: 循环压耗\n      var v1 = 7628 * Math.pow(this.getValue('塑性粘度'), 0.2) * Math.pow(this.getValue('钻井液密度'), 0.8) * Math.pow(this.getValue('泵排量'), 1.8) * this.getValue('钻杆加重钻杆钻铤长度') / Math.pow(this.getValue('钻杆加重钻杆钻铤内径'), 4.82); // 地面管汇压耗\n\n      var a1 = this.getValue('地面管汇摩阻系数') * this.getValue('钻井液密度') * Math.pow(this.getValue('泵排量') / 100, 1.86) * 9.818; // 钻杆内循环压耗\n\n      var a2 = v1; // 加重钻杆内循环压耗\n\n      var a3 = v1; // 钻铤内循环压耗\n\n      var a4 = v1;\n      var b1 = 7628 * Math.pow(this.getValue('塑性粘度'), 0.2) * Math.pow(this.getValue('钻井液密度'), 0.8) * Math.pow(this.getValue('泵排量'), 1.8) * this.getValue('钻杆加重钻杆钻铤长度') / Math.pow(this.getValue('井眼直径') - this.getValue('钻杆加重钻杆钻铤外径'), 3) / Math.pow(this.getValue('井眼直径') + this.getValue('钻杆加重钻杆钻铤外径'), 1.8); // 钻杆环空压耗\n\n      var a5 = b1; // 加重钻杆环空压耗\n\n      var a6 = b1; // 钻铤环空压耗\n\n      var a7 = b1; // 钻杆接箍环空压耗\n\n      var a8 = b1; // 加重钻杆接箍环空压耗\n\n      var a9 = b1;\n      return a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_FinalCalculate2.default, {\n        inputParams: this.state.input,\n        outputParams: this.state.output,\n        setValue: this.setValue.bind(this),\n        title: '综合分析',\n        formula: this.formula\n      });\n    }\n  }]);\n\n  return Total;\n}(_react2.default.Component);\n\nmodule.exports = {\n  Pump: Pump,\n  Cycle: Cycle,\n  Drill: Drill,\n  Params: Params,\n  Loop: Loop,\n  Flow: Flow,\n  Total: Total\n};\n\n//# sourceURL=webpack:///./src/todoList/component/analysis/CalculatMode.jsx?");

/***/ })

})