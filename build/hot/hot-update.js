webpackHotUpdate("pageOne",{

/***/ "./src/todoList/component/effect/EffectCalculateMode.jsx":
/*!***************************************************************!*\
  !*** ./src/todoList/component/effect/EffectCalculateMode.jsx ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Input = __webpack_require__(/*! ../common/Input.jsx */ \"./src/todoList/component/common/Input.jsx\");\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _FinalCalculate = __webpack_require__(/*! ../common/FinalCalculate.jsx */ \"./src/todoList/component/common/FinalCalculate.jsx\");\n\nvar _FinalCalculate2 = _interopRequireDefault(_FinalCalculate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction get(ref) {\n  return +ref.refs[Object.keys(ref.refs)[0]].value;\n}\n\nvar event = document.createEvent('HTMLEvents'); // 水力功率\n\nvar Power =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Power, _React$Component);\n\n  function Power(props) {\n    var _this;\n\n    _classCallCheck(this, Power);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Power).call(this, props));\n    _this.state = {\n      value: 0\n    };\n    return _this;\n  }\n\n  _createClass(Power, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 泵压*泵排量\n      var value = get(this.refs.a) * get(this.refs.b);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '泵压',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Power;\n}(_react2.default.Component); // 喷嘴水功率\n\n\nvar Nozzle =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Nozzle, _React$Component2);\n\n  function Nozzle(props) {\n    var _this2;\n\n    _classCallCheck(this, Nozzle);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Nozzle).call(this, props));\n    _this2.state = {\n      value: 0\n    };\n    return _this2;\n  }\n\n  _createClass(Nozzle, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 喷嘴压降*泵排量\n      var value = get(this.refs.a) * get(this.refs.b);\n      this.props.setValue(value, this.props.code);\n      event.initEvent(\"triggerNozzle\", true, true);\n      event.nozzleValue = value;\n      document.dispatchEvent(event);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '喷嘴压降',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Nozzle;\n}(_react2.default.Component); // 比水功率\n\n\nvar WaterPower =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(WaterPower, _React$Component3);\n\n  function WaterPower(props) {\n    var _this3;\n\n    _classCallCheck(this, WaterPower);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(WaterPower).call(this, props));\n    _this3.state = {\n      value: 0,\n      initNozzleValue: ''\n    };\n    return _this3;\n  }\n\n  _createClass(WaterPower, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 喷嘴水功率*1000/(π*钻头直径*钻头直径/4)\n      var value = get(this.refs.a) * 1000 / (Math.PI * get(this.refs.b) * get(this.refs.c) / 4);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '喷嘴水功率',\n        code: 'a',\n        ref: 'a',\n        defaultValue: this.state.initNozzleValue\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻头直径',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      this.eventListener = document.addEventListener('triggerNozzle', function (event) {\n        _this4.setState({\n          initNozzleValue: event.nozzleValue\n        });\n      }, false);\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      document.removeEventListener(this.eventListener);\n    }\n  }]);\n\n  return WaterPower;\n}(_react2.default.Component); // 钻头压降\n\n\nvar Pressure =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(Pressure, _React$Component4);\n\n  function Pressure(props) {\n    var _this5;\n\n    _classCallCheck(this, Pressure);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Pressure).call(this, props));\n    _this5.state = {\n      value: 0\n    };\n    return _this5;\n  }\n\n  _createClass(Pressure, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  泵压 - 循环压耗\n      var value = get(this.refs.a) - get(this.refs.b);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '泵压',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '循环压耗',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Pressure;\n}(_react2.default.Component); // 泵排量\n\n\nvar Pump =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(Pump, _React$Component5);\n\n  function Pump(props) {\n    var _this6;\n\n    _classCallCheck(this, Pump);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Pump).call(this, props));\n    _this6.state = {\n      value: 0\n    };\n    return _this6;\n  }\n\n  _createClass(Pump, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var value = Math.PI * Math.pow(get(this.refs.a) / 2, 2) * get(this.refs.b) * get(this.refs.c) * get(this.refs.d) * get(this.refs.e) * 100;\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '管套直径',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '活塞冲程',\n        code: 'b',\n        ref: \"b\"\n      }), _react2.default.createElement(_Input2.default, {\n        name: '缸套数',\n        code: 'c',\n        ref: \"c\"\n      }), _react2.default.createElement(_Input2.default, {\n        name: '冲数',\n        code: 'd',\n        ref: \"d\"\n      }), _react2.default.createElement(_Input2.default, {\n        name: '上水效率',\n        code: 'e',\n        ref: \"e\"\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Pump;\n}(_react2.default.Component); // 喷嘴压降\n\n\nvar Drop =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(Drop, _React$Component6);\n\n  function Drop(props) {\n    var _this7;\n\n    _classCallCheck(this, Drop);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Drop).call(this, props));\n    _this7.state = {\n      value: 0\n    };\n    return _this7;\n  }\n\n  _createClass(Drop, [{\n    key: \"calculate\",\n    value: function calculate() {\n      //  810*钻井液密度*泵排量*泵排量/(0.98*0.98*(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)*(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)\n      // 喷嘴 1至8 计算结果\n      var val = Math.pow(get(this.refs.c), 2) * Math.pow(get(this.refs.d), 2) * Math.pow(get(this.refs.e), 2) * Math.pow(get(this.refs.f), 2) * Math.pow(get(this.refs.g), 2) * Math.pow(get(this.refs.h), 2) * Math.pow(get(this.refs.i), 2) * Math.pow(get(this.refs.j), 2);\n      var value = 810 * get(this.refs.a) * Math.pow(get(this.refs.b), 2) / (0.98 * 0.98 * val);\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴1',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴2',\n        code: 'd',\n        ref: 'd'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴3',\n        code: 'e',\n        ref: 'e'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴4',\n        code: 'f',\n        ref: 'f'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴5',\n        code: 'g',\n        ref: 'g'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴6',\n        code: 'h',\n        ref: 'h'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴7',\n        code: 'i',\n        ref: 'i'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴8',\n        code: 'j',\n        ref: 'j'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Drop;\n}(_react2.default.Component); // 射流冲击力\n\n\nvar Jet =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(Jet, _React$Component7);\n\n  function Jet(props) {\n    var _this8;\n\n    _classCallCheck(this, Jet);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Jet).call(this, props));\n    _this8.state = {\n      value: 0\n    };\n    return _this8;\n  }\n\n  _createClass(Jet, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 喷嘴 1至8 计算结果\n      var val = Math.pow(get(this.refs.c), 2) * Math.pow(get(this.refs.d), 2) * Math.pow(get(this.refs.e), 2) * Math.pow(get(this.refs.f), 2) * Math.pow(get(this.refs.g), 2) * Math.pow(get(this.refs.h), 2) * Math.pow(get(this.refs.i), 2) * Math.pow(get(this.refs.j), 2);\n      var value = 1273 * get(this.refs.a) * Math.pow(get(this.refs.b), 2) / val;\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴1',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴2',\n        code: 'd',\n        ref: 'd'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴3',\n        code: 'e',\n        ref: 'e'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴4',\n        code: 'f',\n        ref: 'f'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴5',\n        code: 'g',\n        ref: 'g'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴6',\n        code: 'h',\n        ref: 'h'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴7',\n        code: 'i',\n        ref: 'i'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴8',\n        code: 'j',\n        ref: 'j'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Jet;\n}(_react2.default.Component); // 喷射速度\n\n\nvar Speed =\n/*#__PURE__*/\nfunction (_React$Component8) {\n  _inherits(Speed, _React$Component8);\n\n  function Speed(props) {\n    var _this9;\n\n    _classCallCheck(this, Speed);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(Speed).call(this, props));\n    _this9.state = {\n      value: 0\n    };\n    return _this9;\n  }\n\n  _createClass(Speed, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // 喷嘴 1至8 计算结果\n      var val = Math.pow(get(this.refs.c), 2) * Math.pow(get(this.refs.d), 2) * Math.pow(get(this.refs.e), 2) * Math.pow(get(this.refs.f), 2) * Math.pow(get(this.refs.g), 2) * Math.pow(get(this.refs.h), 2) * Math.pow(get(this.refs.i), 2) * Math.pow(get(this.refs.j), 2);\n      var value = 1273 * get(this.refs.a) * get(this.refs.b) / val;\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '钻井液密度',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴1',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴2',\n        code: 'd',\n        ref: 'd'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴3',\n        code: 'e',\n        ref: 'e'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴4',\n        code: 'f',\n        ref: 'f'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴5',\n        code: 'g',\n        ref: 'g'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴6',\n        code: 'h',\n        ref: 'h'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴7',\n        code: 'i',\n        ref: 'i'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '喷嘴8',\n        code: 'j',\n        ref: 'j'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Speed;\n}(_react2.default.Component); // 环空返速\n\n\nvar Loop =\n/*#__PURE__*/\nfunction (_React$Component9) {\n  _inherits(Loop, _React$Component9);\n\n  function Loop(props) {\n    var _this10;\n\n    _classCallCheck(this, Loop);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Loop).call(this, props));\n    _this10.state = {\n      value: 0\n    };\n    return _this10;\n  }\n\n  _createClass(Loop, [{\n    key: \"calculate\",\n    value: function calculate() {\n      // value 环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻具外径, 2))\n      var value = 1.2732 * Math.pow(10, 3) * get(this.refs.a) / (Math.pow(get(this.refs.b), 2) - Math.pow(get(this.refs.c), 2));\n      this.props.setValue(value, this.props.code);\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"math-params\"\n      }, _react2.default.createElement(_Input2.default, {\n        name: '泵排量',\n        code: 'a',\n        ref: 'a'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '井眼直径',\n        code: 'b',\n        ref: 'b'\n      }), _react2.default.createElement(_Input2.default, {\n        name: '钻具外径',\n        code: 'c',\n        ref: 'c'\n      }), _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n        className: \"result\"\n      }, \" \\u7ED3\\u679C\\uFF1A \", this.state.value, \" \"), _react2.default.createElement(\"div\", {\n        className: \"cal-btn\",\n        onClick: this.calculate.bind(this)\n      }, \"\\u8BA1\\u7B97\")));\n    }\n  }]);\n\n  return Loop;\n}(_react2.default.Component);\n\nvar Total =\n/*#__PURE__*/\nfunction (_React$Component10) {\n  _inherits(Total, _React$Component10);\n\n  function Total(props) {\n    var _this11;\n\n    _classCallCheck(this, Total);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Total).call(this, props));\n    _this11.state = {\n      input: [{\n        label: '泵压',\n        value: ''\n      }, {\n        label: '泵排量',\n        value: ''\n      }, {\n        label: '钻头直径',\n        value: ''\n      }, {\n        label: '钻铤外径',\n        value: ''\n      }, {\n        label: '钻杆外径',\n        value: ''\n      }, {\n        label: '钻井液密度',\n        value: ''\n      }, {\n        label: '井眼直径',\n        value: ''\n      }, {\n        label: '喷嘴1',\n        value: ''\n      }, {\n        label: '喷嘴2',\n        value: ''\n      }, {\n        label: '喷嘴3',\n        value: ''\n      }, {\n        label: '喷嘴4',\n        value: ''\n      }, {\n        label: '喷嘴5',\n        value: ''\n      }, {\n        label: '喷嘴6',\n        value: ''\n      }, {\n        label: '喷嘴7',\n        value: ''\n      }, {\n        label: '喷嘴8',\n        value: ''\n      }],\n      output: [{\n        label: '水力功率',\n        value: 0\n      }, {\n        label: '喷嘴压降',\n        value: 0\n      }, {\n        label: '喷嘴水功率',\n        value: 0\n      }, {\n        label: '比水功率',\n        value: 0\n      }, {\n        label: '射流冲击力',\n        value: 0\n      }, {\n        label: '喷射速度',\n        value: 0\n      }, {\n        label: '钻杆环空返速',\n        value: 0\n      }, {\n        label: '钻铤环空返速',\n        value: 0\n      }]\n    };\n    _this11.formula = ['水力功率 = 泵压*泵排量', '喷嘴压降 = 810*钻井液密度*泵排量*泵排量/(0.98*0.98*(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)*(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)', '喷嘴水功率 = 喷嘴压降*泵排量', '比水功率 = 喷嘴水功率*1000/(π*钻头直径*钻头直径/4)', '射流冲击力 = 1273*钻井液密度*泵排量*泵排量/(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)', '喷射速度 = 1273*泵排量/(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)', '钻杆环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻杆外径, 2))', '钻铤环空返速 = 1.2732 * Math.pow(10, 3) *泵排量 / (Math.pow(井眼直径, 2) - Math.pow(钻铤外径, 2))'];\n    return _this11;\n  }\n\n  _createClass(Total, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var inputs = Object.assign(this.state.input, []);\n      var outputs = Object.assign(this.state.output, []);\n      inputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      outputs.forEach(function (item) {\n        item.value = window.localStorage.getItem(item.label);\n      });\n      this.setState({\n        input: inputs,\n        output: outputs\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(label) {\n      var unit = this.totalParams.filter(function (item) {\n        return item.label === label;\n      });\n      return +unit[0].value;\n    } // 如果算不出来，返回0\n\n  }, {\n    key: \"getValidate\",\n    value: function getValidate(val) {\n      if (isNaN(val) || val === Infinity) {\n        return 0;\n      }\n\n      return (+val).toFixed(2);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(inputParams) {\n      this.totalParams = inputParams;\n      var outputs = Object.assign(this.state.output, []); // v: 7628 * 塑性粘度^0.2*钻井液密度^0.8 * 泵排量^1.8 * 钻具长度/钻具内径^4.82\n\n      var v = ''; // v2: (喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8)*(喷嘴1*喷嘴1+喷嘴2*喷嘴2+喷嘴3*喷嘴3+喷嘴4*喷嘴4+喷嘴5*喷嘴5+喷嘴6*喷嘴6+喷嘴7*喷嘴7+喷嘴8*喷嘴8\n\n      var v2 = this.getValue('喷嘴1') * this.getValue('喷嘴1') + this.getValue('喷嘴2') * this.getValue('喷嘴2') + this.getValue('喷嘴3') * this.getValue('喷嘴3') + this.getValue('喷嘴4') * this.getValue('喷嘴4') + this.getValue('喷嘴5') * this.getValue('喷嘴5') + this.getValue('喷嘴6') * this.getValue('喷嘴6') + this.getValue('喷嘴7') * this.getValue('喷嘴7') + this.getValue('喷嘴8') * this.getValue('喷嘴8'); // v3: 喷嘴压降\n\n      var v3 = 810 * this.getValue('钻井液密度') * this.getValue('泵排量') * this.getValue('泵排量') / (0.98 * 0.98 * v2 * v2); // v4: 喷嘴水功率\n\n      var v4 = v3 * this.getValue('泵排量'); // v5: 井眼直径\n      // let v5 = +window.localStorage.getItem('井眼直径');\n\n      var v5 = this.getValue('井眼直径');\n      outputs[0].value = this.getValidate(this.getValue('泵压') * this.getValue('泵排量'));\n      outputs[1].value = this.getValidate(v3);\n      outputs[2].value = this.getValidate(v4);\n      outputs[3].value = this.getValidate(v4 * 1000 / (Math.PI * this.getValue('钻头直径') * this.getValue('钻头直径') / 4));\n      outputs[4].value = this.getValidate(1273 * this.getValue('钻井液密度') * this.getValue('泵排量') * this.getValue('泵排量') / v2);\n      outputs[5].value = this.getValidate(1273 * this.getValue('泵排量') / v2);\n      outputs[6].value = this.getValidate(1.2732 * Math.pow(10, 3) * this.getValue('泵排量') / (Math.pow(v5, 2) - Math.pow(this.getValue('钻杆外径'), 2)));\n      outputs[7].value = this.getValidate(1.2732 * Math.pow(10, 3) * this.getValue('泵排量') / (Math.pow(v5, 2) - Math.pow(this.getValue('钻铤外径'), 2)));\n      outputs.forEach(function (item) {\n        window.localStorage.setItem(item.label, item.value);\n      });\n      this.setState({\n        output: outputs\n      });\n      this.props.setBack(outputs);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_FinalCalculate2.default, {\n        inputParams: this.state.input,\n        outputParams: this.state.output,\n        setValue: this.setValue.bind(this),\n        title: '钻头水功率',\n        formula: this.formula\n      });\n    }\n  }]);\n\n  return Total;\n}(_react2.default.Component);\n\nmodule.exports = {\n  Power: Power,\n  Nozzle: Nozzle,\n  WaterPower: WaterPower,\n  Pressure: Pressure,\n  Pump: Pump,\n  Drop: Drop,\n  Jet: Jet,\n  Speed: Speed,\n  Loop: Loop,\n  Total: Total\n};\n\n//# sourceURL=webpack:///./src/todoList/component/effect/EffectCalculateMode.jsx?");

/***/ })

})